{"version":3,"sources":["RouteMapVisualization.js","RoutePlanner.js","App.js","reportWebVitals.js","index.js"],"names":["getAvailableModes","fromCity","toCity","cityGraph","connection","modes","Array","isArray","Object","keys","RouteMapVisualization","_ref","route","canvasRef","useRef","useEffect","valid","current","canvas","ctx","getContext","width","height","fillStyle","fillRect","cityPositions","allCities","centerX","centerY","radius","Math","min","routeCities","path","segmentAngle","PI","length","startAngle","forEach","city","index","angle","x","cos","y","sin","inRoute","random","distance","lineWidth","strokeStyle","fromPos","neighbor","toPos","beginPath","moveTo","lineTo","stroke","i","segments","segment","from","to","strokeColor","mode","atan2","midX","midY","closePath","fill","pos","arc","font","textAlign","textBaseline","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","fillText","legendY","legendX","modesUsed","Set","map","s","has","React","createElement","className","ref","defaultCityGraph","getTransportSpeed","transportMode","travelData","travel","modeData","standard","item","id","premium","speed","speedMatch","match","parseInt","getDistance","includes","calculateSegmentCost","playerCount","daysRequired","cost","costUnit","baseCost","ceil","RoutePlanner","addToCart","origin","setOrigin","useState","destination","setDestination","setTransportMode","prioritize","setPrioritize","setRoute","setCityGraph","async","response","fetch","ok","console","warn","status","log","data","json","error","loadTravelData","cities","availableTransportModes","getAvailableTransportModes","allModes","extractModes","add","formatTime","days","wholeDays","floor","hours","round","formatCost","gold","silver","Navigation","size","value","onChange","e","target","key","filter","onClick","Clock","DollarSign","Compass","_travelData$travel","_travelData$travel2","find","name","calculateRoute","result","graph","start","end","optimize","distances","previous","unvisited","bestModes","Infinity","smallestDistance","delete","availableModes","edgeWeight","routeDistance","bestMode","fastestTime","time","cheapestCost","comfortRanking","mostComfortable","comfortTime","comfortLevel","undefined","totalWeight","prev","unshift","modeInfo","weight","findShortestPath","totalTime","calculateTotalTravelTime","totalCost","calculateTotalCost","disabled","Map","join","reduce","total","_travelData$travel3","_travelData$travel4","segmentTime","segmentCost","image","addRouteToCart","itemsToAdd","transportItem","segmentInfo","preserveDays","PlaneTakeoff","App","activeTab","setActiveTab","activeCategory","setActiveCategory","cart","setCart","sidebarOpen","setSidebarOpen","setPlayerCount","standardDaysEnabled","setStandardDaysEnabled","standardDays","setStandardDays","notes","perPerson","security","watch","npcCount","mercenary","potential","isInfo","specialized","provisions","daily","additionalCost","additionalCostUnit","accommodations","lodging","customizablePrice","minPrice","maxPrice","administrative","magical","services","special","intelligence","resources","tabs","label","icon","categories","Shield","Coffee","Home","Sparkles","Crown","categoryLabels","existingItemIndex","findIndex","cartItem","daysValue","itemToAdd","customPriceValue","updatedCart","quantity","people","updateQuantity","itemId","newQuantity","updateDays","newDays","updatePeople","newPeople","calculateTotalPartySize","totalSize","calculateTotal","totalPartySize","itemCost","Scroll","max","Minus","Plus","ShoppingCart","tab","handleTabChange","tabId","category","X","Fragment","removeFromCart","type","updateCustomPrice","newPrice","boundedPrice","calculateItemCost","Info","ChevronRight","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.046b2aaa.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\n// Helper function to get available modes between two cities\r\nfunction getAvailableModes(fromCity, toCity, cityGraph) {\r\n  if (!cityGraph[fromCity] || !cityGraph[fromCity][toCity]) {\r\n    return [];\r\n  }\r\n  \r\n  const connection = cityGraph[fromCity][toCity];\r\n  \r\n  // Check connection format\r\n  if (connection.modes && typeof connection.modes === 'object' && !Array.isArray(connection.modes)) {\r\n    // New format with mode-specific distances\r\n    return Object.keys(connection.modes);\r\n  } else if (connection.modes && Array.isArray(connection.modes)) {\r\n    // Old format with a single distance for all modes\r\n    return connection.modes;\r\n  }\r\n  \r\n  return [];\r\n}\r\n\r\nfunction RouteMapVisualization({ route, cityGraph }) {\r\n  const canvasRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    if (!route || !route.valid || !canvasRef.current) return;\r\n    \r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const width = canvas.width;\r\n    const height = canvas.height;\r\n    \r\n    // Clear canvas\r\n    ctx.fillStyle = '#1F2937';\r\n    ctx.fillRect(0, 0, width, height);\r\n    \r\n    // Create positions for all cities (simple circular layout)\r\n    const cityPositions = {};\r\n    const allCities = Object.keys(cityGraph);\r\n    const centerX = width / 2;\r\n    const centerY = height / 2;\r\n    const radius = Math.min(width, height) / 2.5;\r\n    \r\n    // First position the cities in the route path in a line\r\n    const routeCities = route.path;\r\n    const segmentAngle = Math.PI * 1.5 / (routeCities.length - 1 || 1);\r\n    let startAngle = Math.PI / 4;\r\n    \r\n    routeCities.forEach((city, index) => {\r\n      const angle = startAngle + segmentAngle * index;\r\n      cityPositions[city] = {\r\n        x: centerX + Math.cos(angle) * radius,\r\n        y: centerY + Math.sin(angle) * radius,\r\n        inRoute: true\r\n      };\r\n    });\r\n    \r\n    // Position remaining cities randomly\r\n    allCities.forEach(city => {\r\n      if (!cityPositions[city]) {\r\n        const angle = Math.random() * Math.PI * 2;\r\n        const distance = radius * (0.6 + Math.random() * 0.4);\r\n        cityPositions[city] = {\r\n          x: centerX + Math.cos(angle) * distance,\r\n          y: centerY + Math.sin(angle) * distance,\r\n          inRoute: false\r\n        };\r\n      }\r\n    });\r\n    \r\n    // Draw connections between all cities\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = '#4B5563';\r\n    \r\n    for (const city in cityGraph) {\r\n      const fromPos = cityPositions[city];\r\n      \r\n      for (const neighbor in cityGraph[city]) {\r\n        const toPos = cityPositions[neighbor];\r\n        \r\n        // Skip if this connection has no available modes\r\n        const modes = getAvailableModes(city, neighbor, cityGraph);\r\n        if (modes.length === 0) continue;\r\n        \r\n        ctx.beginPath();\r\n        ctx.moveTo(fromPos.x, fromPos.y);\r\n        ctx.lineTo(toPos.x, toPos.y);\r\n        ctx.stroke();\r\n      }\r\n    }\r\n    \r\n    // Draw the route path with thicker lines and different color\r\n    ctx.lineWidth = 4;\r\n    \r\n    for (let i = 0; i < route.segments.length; i++) {\r\n      const segment = route.segments[i];\r\n      const fromPos = cityPositions[segment.from];\r\n      const toPos = cityPositions[segment.to];\r\n      \r\n      // Skip if positions aren't available\r\n      if (!fromPos || !toPos) continue;\r\n      \r\n      // Color based on transport mode\r\n      let strokeColor;\r\n      switch (segment.mode) {\r\n        case 'airship-ederia':\r\n        case 'airship-bordering':\r\n        case 'airship-distant':\r\n          strokeColor = '#9333EA'; // Purple for airships\r\n          break;\r\n        case 'ryanite-rail-1st':\r\n        case 'ryanite-rail-standard':\r\n        case 'expedited-rail':\r\n          strokeColor = '#2563EB'; // Blue for rail\r\n          break;\r\n        case 'ship-private':\r\n        case 'ship-shared':\r\n          strokeColor = '#0891B2'; // Cyan for ships\r\n          break;\r\n        case 'caravan':\r\n          strokeColor = '#D97706'; // Amber for caravans\r\n          break;\r\n        case 'swift-rider':\r\n          strokeColor = '#DC2626'; // Red for swift riders\r\n          break;\r\n        default:\r\n          strokeColor = '#D97706'; // Default amber\r\n      }\r\n      \r\n      ctx.strokeStyle = strokeColor;\r\n      ctx.beginPath();\r\n      ctx.moveTo(fromPos.x, fromPos.y);\r\n      ctx.lineTo(toPos.x, toPos.y);\r\n      ctx.stroke();\r\n      \r\n      // Draw a directional arrow\r\n      const angle = Math.atan2(toPos.y - fromPos.y, toPos.x - fromPos.x);\r\n      const midX = (fromPos.x + toPos.x) / 2;\r\n      const midY = (fromPos.y + toPos.y) / 2;\r\n      \r\n      ctx.beginPath();\r\n      ctx.moveTo(midX, midY);\r\n      ctx.lineTo(\r\n        midX - 10 * Math.cos(angle - Math.PI / 6),\r\n        midY - 10 * Math.sin(angle - Math.PI / 6)\r\n      );\r\n      ctx.lineTo(\r\n        midX - 10 * Math.cos(angle + Math.PI / 6),\r\n        midY - 10 * Math.sin(angle + Math.PI / 6)\r\n      );\r\n      ctx.closePath();\r\n      ctx.fillStyle = strokeColor;\r\n      ctx.fill();\r\n    }\r\n    \r\n    // Draw cities\r\n    for (const city in cityPositions) {\r\n      const pos = cityPositions[city];\r\n      \r\n      // City dot\r\n      ctx.beginPath();\r\n      ctx.arc(pos.x, pos.y, pos.inRoute ? 10 : 6, 0, Math.PI * 2);\r\n      \r\n      if (city === route.path[0]) {\r\n        // Origin\r\n        ctx.fillStyle = '#10B981'; // Green\r\n        ctx.strokeStyle = '#FFFFFF'; // White border\r\n        ctx.lineWidth = 2;\r\n        ctx.stroke();\r\n      } else if (city === route.path[route.path.length - 1]) {\r\n        // Destination\r\n        ctx.fillStyle = '#DC2626'; // Red\r\n        ctx.strokeStyle = '#FFFFFF'; // White border\r\n        ctx.lineWidth = 2;\r\n        ctx.stroke();\r\n      } else if (pos.inRoute) {\r\n        // Cities in route\r\n        ctx.fillStyle = '#F59E0B'; // Amber\r\n      } else {\r\n        // Other cities\r\n        ctx.fillStyle = '#6B7280'; // Gray\r\n      }\r\n      \r\n      ctx.fill();\r\n      \r\n      // City label\r\n      ctx.font = pos.inRoute ? 'bold 14px sans-serif' : '12px sans-serif';\r\n      ctx.fillStyle = pos.inRoute ? '#FFFFFF' : '#F3F4F6';\r\n      ctx.textAlign = 'center';\r\n      ctx.textBaseline = 'bottom';\r\n      \r\n      // Add a subtle text shadow for better readability\r\n      ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n      ctx.shadowBlur = 4;\r\n      ctx.shadowOffsetX = 1;\r\n      ctx.shadowOffsetY = 1;\r\n      \r\n      ctx.fillText(city, pos.x, pos.y - 12);\r\n      \r\n      // Reset shadow\r\n      ctx.shadowColor = 'transparent';\r\n      ctx.shadowBlur = 0;\r\n      ctx.shadowOffsetX = 0;\r\n      ctx.shadowOffsetY = 0;\r\n    }\r\n    \r\n    // Draw legend\r\n    const legendY = height - 30;\r\n    let legendX = 20;\r\n    \r\n    // Transport modes used in this route\r\n    const modesUsed = new Set(route.segments.map(s => s.mode));\r\n    \r\n    if (modesUsed.has('airship-ederia') || modesUsed.has('airship-bordering') || modesUsed.has('airship-distant')) {\r\n      ctx.fillStyle = '#9333EA';\r\n      ctx.fillRect(legendX, legendY, 25, 4);\r\n      ctx.font = '12px sans-serif';\r\n      ctx.fillStyle = '#FFFFFF';\r\n      ctx.textAlign = 'left';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText('Airship', legendX + 30, legendY);\r\n      legendX += 100;\r\n    }\r\n    \r\n    if (modesUsed.has('ryanite-rail-1st') || modesUsed.has('ryanite-rail-standard') || modesUsed.has('expedited-rail')) {\r\n      ctx.fillStyle = '#2563EB';\r\n      ctx.fillRect(legendX, legendY, 25, 4);\r\n      ctx.font = '12px sans-serif';\r\n      ctx.fillStyle = '#FFFFFF';\r\n      ctx.textAlign = 'left';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText('Rail', legendX + 30, legendY);\r\n      legendX += 100;\r\n    }\r\n    \r\n    if (modesUsed.has('ship-private') || modesUsed.has('ship-shared')) {\r\n      ctx.fillStyle = '#0891B2';\r\n      ctx.fillRect(legendX, legendY, 25, 4);\r\n      ctx.font = '12px sans-serif';\r\n      ctx.fillStyle = '#FFFFFF';\r\n      ctx.textAlign = 'left';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText('Ship', legendX + 30, legendY);\r\n      legendX += 100;\r\n    }\r\n    \r\n    if (modesUsed.has('caravan')) {\r\n      ctx.fillStyle = '#D97706';\r\n      ctx.fillRect(legendX, legendY, 25, 4);\r\n      ctx.font = '12px sans-serif';\r\n      ctx.fillStyle = '#FFFFFF';\r\n      ctx.textAlign = 'left';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText('Caravan', legendX + 30, legendY);\r\n      legendX += 100;\r\n    }\r\n    \r\n    if (modesUsed.has('swift-rider')) {\r\n      ctx.fillStyle = '#DC2626';\r\n      ctx.fillRect(legendX, legendY, 25, 4);\r\n      ctx.font = '12px sans-serif';\r\n      ctx.fillStyle = '#FFFFFF';\r\n      ctx.textAlign = 'left';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText('Swift Rider', legendX + 30, legendY);\r\n    }\r\n    \r\n  }, [route, cityGraph]);\r\n  \r\n  return (\r\n    <div className=\"mt-6 p-5 bg-gray-900 rounded-lg border-2 border-amber-700\">\r\n      <h3 className=\"text-xl font-bold text-amber-400 mb-3\">Route Map</h3>\r\n      <canvas \r\n        ref={canvasRef} \r\n        width={480} \r\n        height={320} \r\n        className=\"w-full h-auto rounded-md border border-gray-700\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RouteMapVisualization;","import React, { useState, useEffect } from 'react';\r\nimport { Map, Navigation, Clock, DollarSign, Compass, PlaneTakeoff } from 'lucide-react';\r\nimport RouteMapVisualization from './RouteMapVisualization';\r\n\r\n// We'll replace this with data loaded from the JSON file\r\nconst defaultCityGraph = {\r\n  \"Royal Capital\": {\r\n    \"Thornefield\": { \r\n      distance: 100, \r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st', 'airship-ederia'] \r\n    },\r\n    \"Port Haven\": { \r\n      distance: 150, \r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st', 'ship-shared', 'ship-private', 'airship-ederia'] \r\n    },\r\n    \"Drakemoor Hold\": { \r\n      distance: 120, \r\n      modes: ['caravan', 'airship-ederia'] \r\n    },\r\n    \"Astralor Academy\": {\r\n      distance: 80,\r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st', 'airship-ederia']\r\n    }\r\n  },\r\n  \"Thornefield\": {\r\n    \"Royal Capital\": { \r\n      distance: 100, \r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st', 'airship-ederia'] \r\n    },\r\n    \"Forest Outpost\": { \r\n      distance: 75, \r\n      modes: ['caravan'] \r\n    },\r\n    \"Crossroads Inn\": { \r\n      distance: 50, \r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st'] \r\n    }\r\n  },\r\n  \"Port Haven\": {\r\n    \"Royal Capital\": {\r\n      distance: 150,\r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st', 'ship-shared', 'ship-private', 'airship-ederia']\r\n    },\r\n    \"Veltaris Harbor\": {\r\n      distance: 120,\r\n      modes: ['caravan', 'ship-shared', 'ship-private']\r\n    },\r\n    \"Eastern Shores\": {\r\n      distance: 200,\r\n      modes: ['ship-shared', 'ship-private']\r\n    }\r\n  },\r\n  \"Drakemoor Hold\": {\r\n    \"Royal Capital\": {\r\n      distance: 120,\r\n      modes: ['caravan', 'airship-ederia']\r\n    },\r\n    \"Mountain Pass\": {\r\n      distance: 80,\r\n      modes: ['caravan']\r\n    }\r\n  },\r\n  \"Astralor Academy\": {\r\n    \"Royal Capital\": {\r\n      distance: 80,\r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st', 'airship-ederia']\r\n    },\r\n    \"Arcane Outpost\": {\r\n      distance: 100,\r\n      modes: ['caravan', 'airship-ederia']\r\n    }\r\n  },\r\n  \"Forest Outpost\": {\r\n    \"Thornefield\": {\r\n      distance: 75,\r\n      modes: ['caravan']\r\n    }\r\n  },\r\n  \"Crossroads Inn\": {\r\n    \"Thornefield\": {\r\n      distance: 50,\r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st']\r\n    },\r\n    \"Trade Junction\": {\r\n      distance: 60,\r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st']\r\n    }\r\n  },\r\n  \"Veltaris Harbor\": {\r\n    \"Port Haven\": {\r\n      distance: 120,\r\n      modes: ['caravan', 'ship-shared', 'ship-private']\r\n    },\r\n    \"Coastal Fortress\": {\r\n      distance: 70,\r\n      modes: ['caravan', 'ship-shared', 'ship-private']\r\n    }\r\n  },\r\n  \"Eastern Shores\": {\r\n    \"Port Haven\": {\r\n      distance: 200,\r\n      modes: ['ship-shared', 'ship-private']\r\n    }\r\n  },\r\n  \"Mountain Pass\": {\r\n    \"Drakemoor Hold\": {\r\n      distance: 80,\r\n      modes: ['caravan']\r\n    },\r\n    \"Border Crossing\": {\r\n      distance: 100,\r\n      modes: ['caravan']\r\n    }\r\n  },\r\n  \"Arcane Outpost\": {\r\n    \"Astralor Academy\": {\r\n      distance: 100,\r\n      modes: ['caravan', 'airship-ederia']\r\n    }\r\n  },\r\n  \"Trade Junction\": {\r\n    \"Crossroads Inn\": {\r\n      distance: 60,\r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st']\r\n    }\r\n  },\r\n  \"Coastal Fortress\": {\r\n    \"Veltaris Harbor\": {\r\n      distance: 70,\r\n      modes: ['caravan', 'ship-shared', 'ship-private']\r\n    }\r\n  },\r\n  \"Border Crossing\": {\r\n    \"Mountain Pass\": {\r\n      distance: 100,\r\n      modes: ['caravan']\r\n    }\r\n  }\r\n};\r\n\r\n// Helper functions for route calculations\r\nfunction getTransportSpeed(transportMode, travelData) {\r\n  if (!travelData || !travelData.travel) return 24; // Default to caravan speed if travelData isn't available\r\n  \r\n  let modeData = null;\r\n  \r\n  // Search in standard travel options\r\n  if (travelData.travel.standard) {\r\n    for (const item of travelData.travel.standard) {\r\n      if (item.id === transportMode) {\r\n        modeData = item;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Search in premium travel options if not found\r\n  if (!modeData && travelData.travel.premium) {\r\n    for (const item of travelData.travel.premium) {\r\n      if (item.id === transportMode) {\r\n        modeData = item;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (!modeData || !modeData.speed) return 24; // Default to caravan speed\r\n  \r\n  // Extract numeric value from speed string\r\n  const speedMatch = modeData.speed.match(/(\\d+)/);\r\n  return speedMatch ? parseInt(speedMatch[1]) : 24;\r\n}\r\n\r\n// Helper function to get the distance for a specific mode between two cities\r\nfunction getDistance(fromCity, toCity, mode, cityGraph) {\r\n  if (!cityGraph[fromCity] || !cityGraph[fromCity][toCity]) {\r\n    return null; // No direct connection\r\n  }\r\n  \r\n  const connection = cityGraph[fromCity][toCity];\r\n  \r\n  // Check if the connection has mode-specific distances\r\n  if (connection.modes && typeof connection.modes === 'object' && !Array.isArray(connection.modes)) {\r\n    // New format with mode-specific distances\r\n    if (connection.modes[mode] && connection.modes[mode].distance) {\r\n      return connection.modes[mode].distance;\r\n    }\r\n    \r\n    // Mode not available for this route\r\n    return null;\r\n  } else if (connection.modes && Array.isArray(connection.modes)) {\r\n    // Old format with a single distance for all modes\r\n    if (connection.modes.includes(mode)) {\r\n      return connection.distance;\r\n    }\r\n    \r\n    // Mode not available for this route\r\n    return null;\r\n  }\r\n  \r\n  // Invalid connection format\r\n  return null;\r\n}\r\n\r\nfunction calculateSegmentCost(transportMode, distance, travelData, playerCount) {\r\n  if (!travelData || !travelData.travel) return 0; // Return 0 if travelData isn't available\r\n  \r\n  let modeData = null;\r\n  \r\n  // Search in standard travel options\r\n  if (travelData.travel.standard) {\r\n    for (const item of travelData.travel.standard) {\r\n      if (item.id === transportMode) {\r\n        modeData = item;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Search in premium travel options if not found\r\n  if (!modeData && travelData.travel.premium) {\r\n    for (const item of travelData.travel.premium) {\r\n      if (item.id === transportMode) {\r\n        modeData = item;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (!modeData) return 0;\r\n  \r\n  const speed = getTransportSpeed(transportMode, travelData);\r\n  const daysRequired = distance / speed;\r\n  \r\n  let cost = 0;\r\n  const costUnit = modeData.costUnit || '';\r\n  \r\n  // Convert silver to gold for calculations\r\n  let baseCost = modeData.cost || 0;\r\n  if (costUnit.includes('silver')) {\r\n    baseCost = baseCost / 20; // 20 silver = 1 gold\r\n  }\r\n  \r\n  // Calculate based on cost structure\r\n  if (costUnit.includes('/day') && !costUnit.includes('/person')) {\r\n    cost = baseCost * daysRequired;\r\n  } else if (costUnit.includes('/week')) {\r\n    cost = baseCost * Math.ceil(daysRequired / 7);\r\n  } else if (costUnit.includes('/person/day')) {\r\n    cost = baseCost * playerCount * daysRequired;\r\n  } else if (costUnit.includes('/person/week')) {\r\n    cost = baseCost * playerCount * Math.ceil(daysRequired / 7);\r\n  } else {\r\n    // Flat rate\r\n    cost = baseCost;\r\n  }\r\n  \r\n  return cost;\r\n}\r\n\r\nfunction getMaxSpeed(modes, travelData) {\r\n  let maxSpeed = 0;\r\n  \r\n  for (const mode of modes) {\r\n    const speed = getTransportSpeed(mode, travelData);\r\n    if (speed > maxSpeed) {\r\n      maxSpeed = speed;\r\n    }\r\n  }\r\n  \r\n  return maxSpeed || 24; // Default to caravan speed if no modes available\r\n}\r\n\r\n// Helper function to get all available modes between two cities\r\nfunction getAvailableModes(fromCity, toCity, cityGraph) {\r\n  if (!cityGraph[fromCity] || !cityGraph[fromCity][toCity]) {\r\n    return [];\r\n  }\r\n  \r\n  const connection = cityGraph[fromCity][toCity];\r\n  \r\n  // Check connection format\r\n  if (connection.modes && typeof connection.modes === 'object' && !Array.isArray(connection.modes)) {\r\n    // New format with mode-specific distances\r\n    return Object.keys(connection.modes);\r\n  } else if (connection.modes && Array.isArray(connection.modes)) {\r\n    // Old format with a single distance for all modes\r\n    return connection.modes;\r\n  }\r\n  \r\n  return [];\r\n}\r\n\r\nfunction getMinCost(modes, distance, travelData, playerCount) {\r\n  let minCost = Infinity;\r\n  \r\n  for (const mode of modes) {\r\n    const cost = calculateSegmentCost(mode, distance, travelData, playerCount);\r\n    if (cost < minCost) {\r\n      minCost = cost;\r\n    }\r\n  }\r\n  \r\n  return minCost === Infinity ? 0 : minCost;\r\n}\r\n\r\n// Dijkstra's algorithm for finding shortest path\r\nfunction findShortestPath(graph, start, end, transportMode, optimize, travelData, playerCount) {\r\n  const distances = {};\r\n  const previous = {};\r\n  const unvisited = new Set();\r\n  const bestModes = {}; // Track best transport mode for each segment\r\n  \r\n  for (const city in graph) {\r\n    distances[city] = city === start ? 0 : Infinity;\r\n    previous[city] = null;\r\n    unvisited.add(city);\r\n    bestModes[city] = {};\r\n  }\r\n  \r\n  while (unvisited.size > 0) {\r\n    // Find the unvisited node with the smallest distance\r\n    let current = null;\r\n    let smallestDistance = Infinity;\r\n    \r\n    for (const city of unvisited) {\r\n      if (distances[city] < smallestDistance) {\r\n        smallestDistance = distances[city];\r\n        current = city;\r\n      }\r\n    }\r\n    \r\n    // If we've reached the end or there's no path, break\r\n    if (current === end || current === null || distances[current] === Infinity) {\r\n      break;\r\n    }\r\n    \r\n    unvisited.delete(current);\r\n    \r\n    // Check all neighbors of the current node\r\n    for (const neighbor in graph[current]) {\r\n      let availableModes;\r\n      \r\n      // Get available modes for this connection based on connection format\r\n      availableModes = getAvailableModes(current, neighbor, graph);\r\n      \r\n      // Skip if transport mode specified and not available for this route\r\n      if (transportMode && !availableModes.includes(transportMode)) {\r\n        continue;\r\n      }\r\n      \r\n      // Skip if there are no valid transport modes\r\n      if (availableModes.length === 0) {\r\n        continue;\r\n      }\r\n      \r\n      let edgeWeight;\r\n      let bestMode = transportMode;\r\n      let routeDistance;\r\n      \r\n      if (optimize === 'time') {\r\n        if (transportMode) {\r\n          // Use the specified transport mode\r\n          routeDistance = getDistance(current, neighbor, transportMode, graph);\r\n          if (routeDistance === null) continue; // Skip if mode not available\r\n          \r\n          const speed = getTransportSpeed(transportMode, travelData);\r\n          edgeWeight = routeDistance / speed;\r\n        } else {\r\n          // Find fastest mode available for this segment\r\n          let fastestTime = Infinity;\r\n          \r\n          for (const mode of availableModes) {\r\n            const distance = getDistance(current, neighbor, mode, graph);\r\n            if (distance === null) continue; // Skip if distance not available\r\n            \r\n            const speed = getTransportSpeed(mode, travelData);\r\n            const time = distance / speed;\r\n            \r\n            if (time < fastestTime) {\r\n              fastestTime = time;\r\n              bestMode = mode;\r\n              routeDistance = distance;\r\n            }\r\n          }\r\n          \r\n          if (fastestTime === Infinity) continue; // Skip if no valid mode found\r\n          edgeWeight = fastestTime;\r\n        }\r\n      } else if (optimize === 'cost') {\r\n        if (transportMode) {\r\n          // Use the specified transport mode\r\n          routeDistance = getDistance(current, neighbor, transportMode, graph);\r\n          if (routeDistance === null) continue; // Skip if mode not available\r\n          \r\n          edgeWeight = calculateSegmentCost(\r\n            transportMode, \r\n            routeDistance, \r\n            travelData, \r\n            playerCount\r\n          );\r\n        } else {\r\n          // Find cheapest mode available for this segment\r\n          let cheapestCost = Infinity;\r\n          \r\n          for (const mode of availableModes) {\r\n            const distance = getDistance(current, neighbor, mode, graph);\r\n            if (distance === null) continue; // Skip if distance not available\r\n            \r\n            const cost = calculateSegmentCost(\r\n              mode, \r\n              distance, \r\n              travelData, \r\n              playerCount\r\n            );\r\n            \r\n            if (cost < cheapestCost) {\r\n              cheapestCost = cost;\r\n              bestMode = mode;\r\n              routeDistance = distance;\r\n            }\r\n          }\r\n          \r\n          if (cheapestCost === Infinity) continue; // Skip if no valid mode found\r\n          edgeWeight = cheapestCost;\r\n        }\r\n      } else if (optimize === 'comfort') {\r\n        // For comfort, we'll prefer 1st class options and airships\r\n        // This is a simple heuristic - could be refined based on actual comfort metrics\r\n        const comfortRanking = {\r\n          'airship-ederia': 5,\r\n          'airship-bordering': 5,\r\n          'airship-distant': 5,\r\n          'ryanite-rail-1st': 4,\r\n          'ship-private': 4,\r\n          'expedited-rail': 3,\r\n          'ryanite-rail-standard': 2,\r\n          'ship-shared': 2,\r\n          'caravan': 1,\r\n          'swift-rider': 1\r\n        };\r\n        \r\n        if (transportMode) {\r\n          // We're still optimizing for time, but with the specified comfortable mode\r\n          routeDistance = getDistance(current, neighbor, transportMode, graph);\r\n          if (routeDistance === null) continue; // Skip if mode not available\r\n          \r\n          const speed = getTransportSpeed(transportMode, travelData);\r\n          edgeWeight = routeDistance / speed;\r\n        } else {\r\n          // Find most comfortable mode available\r\n          let mostComfortable = 0;\r\n          let comfortTime = Infinity;\r\n          \r\n          for (const mode of availableModes) {\r\n            const comfortLevel = comfortRanking[mode] || 0;\r\n            const distance = getDistance(current, neighbor, mode, graph);\r\n            if (distance === null) continue; // Skip if distance not available\r\n            \r\n            const speed = getTransportSpeed(mode, travelData);\r\n            const time = distance / speed;\r\n            \r\n            // Prioritize comfort, but use time as a tiebreaker\r\n            if (comfortLevel > mostComfortable || (comfortLevel === mostComfortable && time < comfortTime)) {\r\n              mostComfortable = comfortLevel;\r\n              comfortTime = time;\r\n              bestMode = mode;\r\n              routeDistance = distance;\r\n            }\r\n          }\r\n          \r\n          if (comfortTime === Infinity) continue; // Skip if no valid mode found\r\n          edgeWeight = comfortTime; // Still optimize for time among the most comfortable options\r\n        }\r\n      }\r\n      \r\n      // Skip if we couldn't find a valid route\r\n      if (edgeWeight === undefined || routeDistance === undefined) {\r\n        continue;\r\n      }\r\n      \r\n      const totalWeight = distances[current] + edgeWeight;\r\n      \r\n      if (totalWeight < distances[neighbor]) {\r\n        distances[neighbor] = totalWeight;\r\n        previous[neighbor] = current;\r\n        bestModes[current][neighbor] = {\r\n          mode: bestMode,\r\n          distance: routeDistance\r\n        };\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Reconstruct the path and gather segment details\r\n  const path = [];\r\n  const segments = [];\r\n  let current = end;\r\n  \r\n  while (current !== null && previous[current] !== null) {\r\n    const prev = previous[current];\r\n    path.unshift(current);\r\n    \r\n    // Get the best mode and distance for this segment\r\n    const modeInfo = bestModes[prev][current];\r\n    \r\n    if (modeInfo) {\r\n      // Add segment details\r\n      segments.unshift({\r\n        from: prev,\r\n        to: current,\r\n        distance: modeInfo.distance,\r\n        mode: modeInfo.mode\r\n      });\r\n    }\r\n    \r\n    current = prev;\r\n  }\r\n  \r\n  if (current === start) {\r\n    path.unshift(start);\r\n  }\r\n  \r\n  return {\r\n    path,\r\n    segments,\r\n    weight: distances[end],\r\n    valid: distances[end] !== Infinity && path.includes(end) && path.includes(start)\r\n  };\r\n}\r\n\r\nfunction calculateTotalTravelTime(segments, travelData) {\r\n  let totalTime = 0;\r\n  \r\n  for (const segment of segments) {\r\n    const speed = getTransportSpeed(segment.mode, travelData);\r\n    totalTime += segment.distance / speed;\r\n  }\r\n  \r\n  return totalTime;\r\n}\r\n\r\nfunction calculateTotalCost(segments, travelData, playerCount) {\r\n  let totalCost = 0;\r\n  \r\n  for (const segment of segments) {\r\n    totalCost += calculateSegmentCost(\r\n      segment.mode,\r\n      segment.distance,\r\n      travelData,\r\n      playerCount\r\n    );\r\n  }\r\n  \r\n  return totalCost;\r\n}\r\n\r\nfunction RoutePlanner({ travelData = {}, playerCount = 1, addToCart }) {\r\n  const [origin, setOrigin] = useState('');\r\n  const [destination, setDestination] = useState('');\r\n  const [transportMode, setTransportMode] = useState('');\r\n  const [prioritize, setPrioritize] = useState('time');\r\n  const [route, setRoute] = useState(null);\r\n  const [cityGraph, setCityGraph] = useState(defaultCityGraph);\r\n  \r\n  // Load travel times data from JSON file\r\n  useEffect(() => {\r\n    const loadTravelData = async () => {\r\n      try {\r\n        // Use PUBLIC_URL to create the correct path\r\n        const response = await fetch(`${process.env.PUBLIC_URL}/data/travel-times.json`);\r\n        if (!response.ok) {\r\n          console.warn('Could not load travel times from /data. Status:', response.status);\r\n          console.log('Using default city graph data');\r\n          return;\r\n        }\r\n        \r\n        const data = await response.json();\r\n        setCityGraph(data);\r\n        console.log('Loaded travel times from /data directory');\r\n      } catch (error) {\r\n        console.error('Error loading travel times data:', error);\r\n        console.log('Using default city graph data');\r\n      }\r\n    };\r\n    \r\n    loadTravelData();\r\n  }, []);\r\n  \r\n  const cities = Object.keys(cityGraph);\r\n  \r\n  const calculateRoute = () => {\r\n    if (!origin || !destination) return;\r\n    \r\n    const result = findShortestPath(\r\n      cityGraph, \r\n      origin, \r\n      destination, \r\n      transportMode, \r\n      prioritize,\r\n      travelData,\r\n      playerCount\r\n    );\r\n    \r\n    if (result.valid) {\r\n      const totalTime = calculateTotalTravelTime(result.segments, travelData);\r\n      const totalCost = calculateTotalCost(result.segments, travelData, playerCount);\r\n      \r\n      setRoute({\r\n        ...result,\r\n        totalTime,\r\n        totalCost\r\n      });\r\n    } else {\r\n      setRoute(result);\r\n    }\r\n  };\r\n  \r\n  // Get available transport modes between all cities\r\n  const getAvailableTransportModes = () => {\r\n    if (!origin || !destination) return [];\r\n    \r\n    // Get all available modes across all cities\r\n    const allModes = new Set();\r\n    \r\n    // Helper function to check connection format and extract modes\r\n    const extractModes = (connection) => {\r\n      if (!connection) return [];\r\n      \r\n      if (connection.modes && typeof connection.modes === 'object' && !Array.isArray(connection.modes)) {\r\n        // New format with mode-specific distances\r\n        return Object.keys(connection.modes);\r\n      } else if (connection.modes && Array.isArray(connection.modes)) {\r\n        // Old format with a single distance for all modes\r\n        return connection.modes;\r\n      }\r\n      \r\n      return [];\r\n    };\r\n    \r\n    // If cities are directly connected\r\n    if (cityGraph[origin] && cityGraph[origin][destination]) {\r\n      return extractModes(cityGraph[origin][destination]);\r\n    }\r\n    \r\n    // For non-direct connections, return all possible transport modes\r\n    for (const city in cityGraph) {\r\n      for (const neighbor in cityGraph[city]) {\r\n        const modes = extractModes(cityGraph[city][neighbor]);\r\n        modes.forEach(mode => allModes.add(mode));\r\n      }\r\n    }\r\n    \r\n    return Array.from(allModes);\r\n  };\r\n  \r\n  // Filter transport modes that are available for the selected route\r\n  const availableTransportModes = getAvailableTransportModes();\r\n  \r\n  useEffect(() => {\r\n    // Reset route when inputs change\r\n    setRoute(null);\r\n  }, [origin, destination, transportMode, prioritize]);\r\n  \r\n  // Helper function to format time in days and hours\r\n  const formatTime = (days) => {\r\n    const wholeDays = Math.floor(days);\r\n    const hours = Math.round((days - wholeDays) * 24);\r\n    \r\n    if (wholeDays > 0 && hours > 0) {\r\n      return `${wholeDays} day${wholeDays !== 1 ? 's' : ''}, ${hours} hour${hours !== 1 ? 's' : ''}`;\r\n    } else if (wholeDays > 0) {\r\n      return `${wholeDays} day${wholeDays !== 1 ? 's' : ''}`;\r\n    } else {\r\n      return `${hours} hour${hours !== 1 ? 's' : ''}`;\r\n    }\r\n  };\r\n  \r\n  // Helper function to format cost as gold/silver\r\n  const formatCost = (cost) => {\r\n    const gold = Math.floor(cost);\r\n    const silver = Math.round((cost - gold) * 20);\r\n    \r\n    if (gold > 0 && silver > 0) {\r\n      return `${gold} gold, ${silver} silver`;\r\n    } else if (gold > 0) {\r\n      return `${gold} gold`;\r\n    } else {\r\n      return `${silver} silver`;\r\n    }\r\n  };\r\n  \r\n  // Add all transportation in the route to cart\r\n  const addRouteToCart = () => {\r\n    if (!route || !route.valid || !travelData || !travelData.travel) return;\r\n    \r\n    // First, collect all items to add\r\n    const itemsToAdd = route.segments.map(segment => {\r\n      // Find the transport item in travelData\r\n      const standardModes = travelData.travel.standard || [];\r\n      const premiumModes = travelData.travel.premium || [];\r\n      const allTransportItems = [\r\n        ...standardModes,\r\n        ...premiumModes\r\n      ];\r\n      \r\n      const transportItem = allTransportItems.find(item => item && item.id === segment.mode);\r\n      \r\n      if (transportItem) {\r\n        // Calculate days based on segment\r\n        const speed = getTransportSpeed(segment.mode, travelData);\r\n        const days = Math.ceil(segment.distance / speed);\r\n        \r\n        // Create a modified item with segment info and a unique ID\r\n        return {\r\n          ...transportItem,\r\n          id: `${segment.mode}-${segment.from}-${segment.to}`, // Create unique ID for each segment\r\n          segmentInfo: `${segment.from} → ${segment.to} (${segment.distance} miles)`,\r\n          days: days, // Add the calculated days\r\n          preserveDays: true // Flag to preserve days value\r\n        };\r\n      }\r\n      return null;\r\n    }).filter(item => item !== null);\r\n    \r\n    // Add all items to cart at once\r\n    if (addToCart && itemsToAdd.length > 0) {\r\n      // Add each item to cart\r\n      itemsToAdd.forEach(item => addToCart(item));\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"bg-gray-800 rounded-lg p-6 border-2 border-amber-600 shadow-lg\">\r\n      <h2 className=\"text-2xl font-bold text-amber-400 mb-5 flex items-center\">\r\n        <Navigation className=\"mr-3\" size={24} />\r\n        Ederian Route Planner\r\n      </h2>\r\n      \r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-5\">\r\n        <div>\r\n          <label className=\"block text-base text-amber-300 mb-2 font-medium\">Origin:</label>\r\n          <select \r\n            className=\"w-full bg-gray-700 border-2 border-gray-600 rounded-md p-3 text-white text-base focus:border-amber-500 focus:outline-none\"\r\n            value={origin}\r\n            onChange={(e) => setOrigin(e.target.value)}\r\n          >\r\n            <option value=\"\">Select origin city</option>\r\n            {cities.map(city => (\r\n              <option key={city} value={city}>{city}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        \r\n        <div>\r\n          <label className=\"block text-base text-amber-300 mb-2 font-medium\">Destination:</label>\r\n          <select \r\n            className=\"w-full bg-gray-700 border-2 border-gray-600 rounded-md p-3 text-white text-base focus:border-amber-500 focus:outline-none\"\r\n            value={destination}\r\n            onChange={(e) => setDestination(e.target.value)}\r\n          >\r\n            <option value=\"\">Select destination city</option>\r\n            {cities.filter(city => city !== origin).map(city => (\r\n              <option key={city} value={city}>{city}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"mb-5\">\r\n        <label className=\"block text-base text-amber-300 mb-2 font-medium\">Prioritize:</label>\r\n        <div className=\"flex flex-wrap gap-3\">\r\n          <button \r\n            className={`px-4 py-2 rounded-md flex items-center text-base font-medium ${prioritize === 'time' ? 'bg-amber-600 text-white border-2 border-amber-400' : 'bg-gray-700 text-white border-2 border-gray-600 hover:bg-gray-600'}`}\r\n            onClick={() => setPrioritize('time')}\r\n          >\r\n            <Clock size={18} className=\"mr-2\" />\r\n            Fastest\r\n          </button>\r\n          <button \r\n            className={`px-4 py-2 rounded-md flex items-center text-base font-medium ${prioritize === 'cost' ? 'bg-amber-600 text-white border-2 border-amber-400' : 'bg-gray-700 text-white border-2 border-gray-600 hover:bg-gray-600'}`}\r\n            onClick={() => setPrioritize('cost')}\r\n          >\r\n            <DollarSign size={18} className=\"mr-2\" />\r\n            Cheapest\r\n          </button>\r\n          <button \r\n            className={`px-4 py-2 rounded-md flex items-center text-base font-medium ${prioritize === 'comfort' ? 'bg-amber-600 text-white border-2 border-amber-400' : 'bg-gray-700 text-white border-2 border-gray-600 hover:bg-gray-600'}`}\r\n            onClick={() => setPrioritize('comfort')}\r\n          >\r\n            <Compass size={18} className=\"mr-2\" />\r\n            Most Comfortable\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"mb-5\">\r\n        <label className=\"block text-base text-amber-300 mb-2 font-medium\">Transport Mode (Optional):</label>\r\n        <select \r\n          className=\"w-full bg-gray-700 border-2 border-gray-600 rounded-md p-3 text-white text-base focus:border-amber-500 focus:outline-none\"\r\n          value={transportMode}\r\n          onChange={(e) => setTransportMode(e.target.value)}\r\n        >\r\n          <option value=\"\">Any available mode</option>\r\n          {availableTransportModes.map(mode => {\r\n            // Safely access travel data with null checks\r\n            const standardModes = travelData?.travel?.standard || [];\r\n            const premiumModes = travelData?.travel?.premium || [];\r\n            const modeData = [...standardModes, ...premiumModes]\r\n              .find(item => item && item.id === mode);\r\n            \r\n            return modeData ? (\r\n              <option key={mode} value={mode}>\r\n                {modeData.name} ({modeData.speed})\r\n              </option>\r\n            ) : (\r\n              <option key={mode} value={mode}>{mode}</option>\r\n            );\r\n          })}\r\n        </select>\r\n      </div>\r\n      \r\n      <button \r\n        className=\"w-full bg-amber-600 hover:bg-amber-700 font-bold py-3 px-4 rounded-lg flex items-center justify-center text-black text-lg shadow-md transition-colors duration-200\"\r\n        onClick={calculateRoute}\r\n        disabled={!origin || !destination}\r\n      >\r\n        <Map size={20} className=\"mr-2\" />\r\n        Calculate Route\r\n      </button>\r\n      \r\n      \r\n      {route && route.valid && (\r\n        <div className=\"mt-6 p-5 bg-gray-900 rounded-lg border-2 border-amber-700\">\r\n          <h3 className=\"text-xl font-bold text-amber-400 mb-3\">Route Details</h3>\r\n          \r\n          <div className=\"space-y-3 mb-5\">\r\n            <div className=\"text-lg\">\r\n              <span className=\"text-amber-300 font-medium\">Path: </span>\r\n              <span className=\"text-white\">{route.path.join(\" → \")}</span>\r\n            </div>\r\n            \r\n            <div className=\"text-lg\">\r\n              <span className=\"text-amber-300 font-medium\">Total Distance: </span>\r\n              <span className=\"text-white\">{route.segments.reduce((total, segment) => total + segment.distance, 0)} miles</span>\r\n            </div>\r\n            \r\n            <div className=\"text-lg\">\r\n              <span className=\"text-amber-300 font-medium\">Total Travel Time: </span>\r\n              <span className=\"text-white\">{formatTime(route.totalTime)}</span>\r\n            </div>\r\n            \r\n            <div className=\"text-lg\">\r\n              <span className=\"text-amber-300 font-medium\">Estimated Cost: </span>\r\n              <span className=\"text-white\">{formatCost(route.totalCost)}</span>\r\n            </div>\r\n          </div>\r\n          \r\n          {route.segments && route.segments.length > 0 && (\r\n            <div>\r\n              <h4 className=\"text-lg font-semibold text-amber-400 mb-3\">Segment Details</h4>\r\n              <div className=\"space-y-3 max-h-64 overflow-y-auto pr-2 pb-1\">\r\n                {route.segments.map((segment, index) => {\r\n                  // Safely access travel data with null checks\r\n                  const standardModes = travelData?.travel?.standard || [];\r\n                  const premiumModes = travelData?.travel?.premium || [];\r\n                  const modeData = [...standardModes, ...premiumModes]\r\n                    .find(item => item && item.id === segment.mode);\r\n                  \r\n                  const speed = getTransportSpeed(segment.mode, travelData);\r\n                  const segmentTime = segment.distance / speed;\r\n                  const segmentCost = calculateSegmentCost(\r\n                    segment.mode,\r\n                    segment.distance,\r\n                    travelData,\r\n                    playerCount\r\n                  );\r\n                  \r\n                  return (\r\n                    <div key={index} className=\"bg-gray-800 p-4 rounded-md border border-gray-700\">\r\n                      <div className=\"flex justify-between text-base\">\r\n                        <span className=\"text-white font-medium\">\r\n                          {segment.from} → {segment.to}\r\n                        </span>\r\n                        <span className=\"text-amber-400 font-bold\">\r\n                          {segment.distance} miles\r\n                        </span>\r\n                      </div>\r\n                      {modeData && (\r\n                        <div className=\"mt-2\">\r\n                          <span className=\"text-white flex items-center text-base\">\r\n                            <span className=\"mr-2 text-xl\">{modeData.image}</span> \r\n                            <span className=\"font-medium\">{modeData.name}</span> <span className=\"ml-2 text-gray-300\">({modeData.speed})</span>\r\n                          </span>\r\n                          <div className=\"flex justify-between text-sm mt-2 text-gray-200\">\r\n                            <span><span className=\"text-amber-300\">Time:</span> {formatTime(segmentTime)}</span>\r\n                            <span><span className=\"text-amber-300\">Cost:</span> {formatCost(segmentCost)}</span>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  );\r\n                })}\r\n              </div>\r\n            </div>\r\n          )}\r\n          \r\n          {addToCart && (\r\n            <button\r\n              className=\"w-full mt-5 bg-gray-700 hover:bg-gray-600 font-bold py-3 rounded-lg flex items-center justify-center text-white text-base border border-gray-500 transition-colors duration-200\"\r\n              onClick={addRouteToCart}\r\n            >\r\n              <PlaneTakeoff size={18} className=\"mr-2\" />\r\n              Add Travel Options to Cart\r\n            </button>\r\n          )}\r\n        </div>\r\n      )}\r\n      \r\n      {/* Add the RouteMapVisualization component here */}\r\n      {route && route.valid && (\r\n        <RouteMapVisualization route={route} cityGraph={cityGraph} />\r\n      )}\r\n      \r\n      {route && !route.valid && (\r\n        <div className=\"mt-6 p-5 bg-gray-900 rounded-lg border-2 border-red-700 text-red-400 text-lg font-medium\">\r\n          No valid route found between these cities with the selected transport mode.\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoutePlanner;","import React, { useState, useEffect } from 'react';\nimport { Scroll, ShoppingCart, Menu, X, ChevronRight, Minus, Plus, Info, Shield, Ship, Map, Home, Sparkles, Crown, Coffee } from 'lucide-react';\nimport './App.css';\nimport RoutePlanner from './RoutePlanner';\n\nfunction App() {\n  // State management\n  const [activeTab, setActiveTab] = useState('travel');\n  const [activeCategory, setActiveCategory] = useState('standard');\n  const [cart, setCart] = useState([]);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [playerCount, setPlayerCount] = useState(5); // Default 5 player characters\n  const [standardDaysEnabled, setStandardDaysEnabled] = useState(false);\n  const [standardDays, setStandardDays] = useState(7); // Default 7 days\n  \n  // Data structure for all travel options and services\n  const travelData = {\n    travel: {\n      standard: [\n        { id: \"caravan\", name: \"Caravan\", speed: \"24 miles/day\", cost: 1, costUnit: \"gold/person/day\", notes: \"Includes basic provisions and security\", image: \"🐪\", perPerson: true },\n        { id: \"ryanite-rail-1st\", name: \"Ryanite Rail (1st class)\", speed: \"36 miles/day\", cost: 2, costUnit: \"gold/person/day\", notes: \"Operates only between major cities and settlements\", image: \"🚆\", perPerson: true },\n        { id: \"ryanite-rail-standard\", name: \"Ryanite Rail (standard)\", speed: \"36 miles/day\", cost: 5, costUnit: \"silver/person/day\", notes: \"Operates only between major cities and settlements\", image: \"🚆\", perPerson: true },\n        { id: \"ship-private\", name: \"Ship (private cabin)\", speed: \"48 miles/day\", cost: 2, costUnit: \"gold/person/day\", notes: \"Available only along coastal routes and major rivers\", image: \"🚢\", perPerson: true },\n        { id: \"ship-shared\", name: \"Ship (shared quarters)\", speed: \"48 miles/day\", cost: 5, costUnit: \"silver/person/day\", notes: \"Available only along coastal routes and major rivers\", image: \"🚢\", perPerson: true },\n        { id: \"airship-ederia\", name: \"Airship (within Ederia)\", speed: \"96 miles/day\", cost: 3000, costUnit: \"gold/day\", notes: \"Requires minimum 3-day advance booking through House Astralor representatives\", image: \"🛸\" },\n        { id: \"airship-bordering\", name: \"Airship (bordering nations)\", speed: \"96 miles/day\", cost: 6000, costUnit: \"gold/day\", notes: \"Requires minimum 3-day advance booking through House Astralor representatives\", image: \"🛸\" },\n        { id: \"airship-distant\", name: \"Airship (distant territories)\", speed: \"96 miles/day\", cost: 9000, costUnit: \"gold/day\", notes: \"Requires minimum 3-day advance booking through House Astralor representatives\", image: \"🛸\" },\n      ],\n      premium: [\n        { id: \"expedited-rail\", name: \"Expedited Ryanite Rail\", speed: \"40 miles/day\", cost: 5, costUnit: \"gold/person/day\", notes: \"Priority boarding, private compartment, meals included, 10% speed increase\", image: \"🚅\", perPerson: true },\n        { id: \"swift-rider\", name: \"Swift Rider Service\", speed: \"60 miles/day\", cost: 10, costUnit: \"gold/day\", notes: \"Relay of horses stationed every 20 miles, limited to 2 riders per route, available only on main roads\", image: \"🐎\" },\n        { id: \"falcon-messenger\", name: \"House Falkrest Falcon Messenger\", speed: \"Varies\", cost: 20, costUnit: \"gold/message\", notes: \"Delivery of urgent sealed communications, reaches most destinations in Ederia within 1-2 days, limited to messages weighing less than 3 ounces\", image: \"🦅\" },\n      ]\n    },\n    security: {\n      watch: [\n        { id: \"small-guard\", name: \"Small Guard Detachment\", cost: 10, costUnit: \"gold/day\", notes: \"1 Sergeant, 4 Watchmen\", image: \"👮\", npcCount: 5 },\n        { id: \"medium-guard\", name: \"Medium Guard Detachment\", cost: 18, costUnit: \"gold/day\", notes: \"1 Lieutenant, 1 Sergeant, 8 Watchmen\", image: \"👮\", npcCount: 10 },\n        { id: \"large-guard\", name: \"Large Guard Detachment\", cost: 35, costUnit: \"gold/day\", notes: \"1 Captain, 2 Sergeants, 17 Watchmen\", image: \"👮\", npcCount: 20 },\n      ],\n      mercenary: [\n        { id: \"local-militia\", name: \"Local Militia\", cost: 15, costUnit: \"gold/day\", notes: \"20 fighters (varied training)\", image: \"⚔️\", npcCount: 20 },\n        { id: \"registered-company\", name: \"Registered Company\", cost: 40, costUnit: \"gold/day\", notes: \"15 professional soldiers\", image: \"⚔️\", npcCount: 15 },\n        { id: \"elite-company\", name: \"Elite Company\", cost: 100, costUnit: \"gold/day\", notes: \"10 veteran specialists\", image: \"⚔️\", npcCount: 10 },\n      ],\n      \n      potential: [\n        { id: \"silver-shields-info\", name: \"The Silver Shields\", cost: 100, costUnit: \"gold/day\", notes: \"Elite Company (10) - Specializes in personal protection and escort duties\", image: \"🛡️\", isInfo: true },\n        { id: \"thornefield-info\", name: \"Thornefield Sentinels\", cost: 40, costUnit: \"gold/day\", notes: \"Registered Company (15) - Expert in rural and wilderness operations\", image: \"🌲\", isInfo: true },\n        { id: \"shadow-riders-info\", name: \"Shadow Riders\", cost: 40, costUnit: \"gold/day\", notes: \"Registered Company (15) - Specialists in urban security and intelligence gathering\", image: \"🕵️\", isInfo: true },\n        { id: \"veltaris-info\", name: \"Veltaris Mariners\", cost: 100, costUnit: \"gold/day\", notes: \"Elite Company (10) - Naval and coastal security operations\", image: \"⚓\", isInfo: true },\n      ],\n      specialized: [\n        { id: \"wyvern-scout\", name: \"House Drakemoor Wyvern Scout\", cost: 75, costUnit: \"gold/day\", notes: \"Single Crownclaw Knight with wyvern mount, aerial reconnaissance and messaging, limited combat capability, 24-hour advance notice required\", image: \"🐉\", npcCount: 1 },\n        { id: \"mage-warden\", name: \"House Astralor Mage-Warden\", cost: 50, costUnit: \"gold/day\", notes: \"Specialized arcane security, detects magical threats and provides countermeasures, can establish temporary wards for safe lodging\", image: \"🧙\", npcCount: 1 },\n      ]\n    },\n    provisions: {\n      daily: [\n        { id: \"small-provisions\", name: \"Small Group Provisions\", cost: 5, costUnit: \"gold/day\", notes: \"For 5-10 people. Food, water, basic equipment maintenance\", image: \"🍖\" },\n        { id: \"medium-provisions\", name: \"Medium Group Provisions\", cost: 12, costUnit: \"gold/day\", notes: \"For 11-25 people. Includes pack animals and spare equipment\", image: \"🍖\" },\n        { id: \"large-provisions\", name: \"Large Group Provisions\", cost: 30, costUnit: \"gold/day\", notes: \"For 26-60 people. Includes field kitchen and medical supplies\", image: \"🍖\" },\n        { id: \"huge-provisions\", name: \"Huge Group Provisions\", cost: 60, costUnit: \"gold/day\", notes: \"For 61-100 people. Includes dedicated logistics staff\", image: \"🍖\" },\n      ],\n      specialized: [\n        { id: \"luxury-rations\", name: \"Luxury Rations\", cost: 2, costUnit: \"gold/person/day\", notes: \"Fine wines and spirits, fresh meats, variety of fruits and vegetables\", image: \"🍷\" },\n        { id: \"expedition-package\", name: \"Extended Expedition Package\", cost: 200, baseCost: true, additionalCost: 1, additionalCostUnit: \"gold/person/day\", notes: \"Weatherproof tents, portable furniture, one month of preserved rations, medicine chest with healing potions\", image: \"⛺\" },\n      ]\n    },\n    accommodations: {\n      lodging: [\n        { id: \"standard-inn\", name: \"Local Inn (standard)\", cost: 5, costUnit: \"silver/person/night\", notes: \"Private or shared room, basic meals\", image: \"🏨\", perPerson: true },\n        { id: \"premium-inn\", name: \"Local Inn (premium)\", cost: 2, costUnit: \"gold/person/night\", notes: \"Private room, quality meals, bath services\", image: \"🏨\", perPerson: true },\n        { id: \"noble-estate\", name: \"Noble Estate Hosting\", cost: 30, costUnit: \"gold/person\", notes: \"Luxury accommodations as guest of local nobility (Gift of 10-50 gold per person recommended)\", image: \"🏰\", perPerson: true, customizablePrice: true, minPrice: 10, maxPrice: 50 },\n        { id: \"embassy\", name: \"Ederian Embassy\", cost: 0, costUnit: \"No direct cost\", notes: \"Available only in major cities or foreign capitals, full diplomatic services (requires royal authorization)\", image: \"🏛️\" },\n        { id: \"encampment\", name: \"Field Encampment\", cost: 5, costUnit: \"gold/day (setup fee)\", additionalCost: \"plus provisions\", notes: \"Established by royal quartermasters, includes security perimeter\", image: \"⛺\" },\n      ],\n      administrative: [\n        { id: \"chancery\", name: \"Mobile Chancery\", cost: 25, costUnit: \"gold/day\", notes: \"Includes 2 royal scribes, official seals and documentation, secure message handling\", image: \"📜\" },\n        { id: \"herald\", name: \"Court Herald\", cost: 10, costUnit: \"gold/day\", notes: \"Makes official proclamations, arranges local meetings and audiences, manages protocol and ceremony\", image: \"📢\" },\n        { id: \"investigator\", name: \"Royal Investigator\", cost: 15, costUnit: \"gold/day\", notes: \"Specializes in evidence gathering, legal authority to question subjects, trained in detection of falsehoods\", image: \"🔍\" },\n      ]\n    },\n    magical: {\n      services: [\n        { id: \"arcane-lock\", name: \"Arcane Lock\", cost: 25, costUnit: \"gold/application\", notes: \"Secures documents or rooms against tampering\", image: \"🔒\" },\n        { id: \"truth-serum\", name: \"Truth Serum\", cost: 75, costUnit: \"gold/dose\", notes: \"Compels truthful answers for 1 hour (resisted by strong will)\", image: \"⚗️\" },\n        { id: \"scrying\", name: \"Location Scrying\", cost: 150, costUnit: \"gold/attempt\", notes: \"Attempts to locate specific person or object within 100 miles\", image: \"🔮\" },\n        { id: \"weather\", name: \"Weather Prediction\", cost: 40, costUnit: \"gold\", notes: \"Accurate 3-day forecast for region\", image: \"☁️\" },\n      ]\n    },\n    special: {\n      intelligence: [\n        { id: \"informants\", name: \"Local Informants\", cost: 30, costUnit: \"gold (average)\", notes: \"Market rumors and common knowledge, basic movements of notable figures, public sentiment reports\", image: \"👥\" },\n        { id: \"spy-network\", name: \"Royal Spy Network\", cost: 0, costUnit: \"Requires approval\", notes: \"Detailed reports on political movements, identification of potential threats, access to existing agents in the field\", image: \"🕵️\" },\n      ],\n      resources: [\n        { id: \"royal-seal\", name: \"Royal Seal Authority\", cost: 0, costUnit: \"N/A\", notes: \"Can requisition emergency resources, may command temporary service from any royal subject, grants access to secure locations\", image: \"👑\" },\n        { id: \"gift-chest\", name: \"Royal Gift Chest\", cost: 500, costUnit: \"gold (average)\", notes: \"Curated selection of diplomatic gifts, includes Ederian luxury goods, customized to recipient's known preferences\", image: \"🎁\" },\n        { id: \"banquet-fund\", name: \"Formal Banquet Fund\", cost: 300, costUnit: \"gold (average)\", notes: \"Finances to host local nobility or officials, includes entertainment and hospitality\", image: \"🍽️\" },\n        { id: \"cartographer\", name: \"Royal Cartographer\", cost: 20, costUnit: \"gold/day\", notes: \"Updates and creates detailed maps, documents new discoveries or changes\", image: \"🗺️\" },\n        { id: \"resupply\", name: \"House Thornefield Rapid Resupply\", cost: 0, costUnit: \"25% premium on provisions\", notes: \"Emergency food and supply delivery to remote locations\", image: \"📦\" },\n        { id: \"blessing\", name: \"House Emberlyn Blessing Ritual\", cost: 30, costUnit: \"gold\", notes: \"Ceremonial blessing for missions or endeavors, increases morale of local supporters\", image: \"✨\" },\n      ]\n    }\n  };\n\n  // Tab data for navigation\n  const tabs = [\n    { id: 'travel', label: 'Travel Options', icon: <Map size={20} />, categories: ['standard', 'premium'] },\n    { id: 'security', label: 'Security Services', icon: <Shield size={20} />, categories: ['watch', 'mercenary', 'specialized', 'potential'] },\n    { id: 'provisions', label: 'Provisions', icon: <Coffee size={20} />, categories: ['daily', 'specialized'] },\n    { id: 'accommodations', label: 'Accommodations', icon: <Home size={20} />, categories: ['lodging', 'administrative'] },\n    { id: 'magical', label: 'Magical Services', icon: <Sparkles size={20} />, categories: ['services'] },\n    { id: 'special', label: 'Special Resources', icon: <Crown size={20} />, categories: ['intelligence', 'resources'] },\n  ];\n\n  // Category labels\n  const categoryLabels = {\n    standard: 'Standard Travel',\n    premium: 'Premium Services',\n    watch: 'Ederian Watch',\n    mercenary: 'Mercenary Companies',\n    specialized: 'Specialized Security',\n    potential: 'Potential Companies',\n    daily: 'Daily Provisions',\n    specialized: 'Specialized Provisions',\n    lodging: 'Lodging Options',\n    administrative: 'Administrative Services',\n    services: 'Arcane Services',\n    intelligence: 'Intelligence Network',\n    resources: 'Resources & Services'\n  };\n\n  // Add item to cart\n  const addToCart = (item) => {\n    // Skip if it's just an informational item\n    if (item.isInfo) return;\n    \n    const existingItemIndex = cart.findIndex(cartItem => cartItem.id === item.id);\n    \n    // Set days value based on standardDaysEnabled setting or preserve item's days if flagged\n    const daysValue = item.preserveDays ? item.days : (standardDaysEnabled ? standardDays : 1);\n    \n    // For items with customizable price, use the default price initially\n    let itemToAdd = { ...item };\n    if (item.customizablePrice) {\n      itemToAdd.customPriceValue = item.cost;\n    }\n    \n    if (existingItemIndex >= 0) {\n      const updatedCart = [...cart];\n      updatedCart[existingItemIndex].quantity += 1;\n      setCart(updatedCart);\n    } else {\n      setCart([...cart, { ...itemToAdd, quantity: 1, days: daysValue, people: item.perPerson ? 1 : 0 }]);\n    }\n  };\n\n  // Remove item from cart\n  const removeFromCart = (itemId) => {\n    setCart(cart.filter(item => item.id !== itemId));\n  };\n\n  // Update item quantity in cart\n  const updateQuantity = (itemId, newQuantity) => {\n    if (newQuantity < 1) return;\n    \n    const updatedCart = cart.map(item => \n      item.id === itemId ? { ...item, quantity: newQuantity } : item\n    );\n    setCart(updatedCart);\n  };\n\n  // Update days in cart - if standardized is enabled, update ALL items\n  const updateDays = (itemId, newDays) => {\n    if (newDays < 1) return;\n    \n    if (standardDaysEnabled) {\n      // Update standardDays and all items in cart\n      setStandardDays(newDays);\n      const updatedCart = cart.map(item => ({...item, days: newDays}));\n      setCart(updatedCart);\n    } else {\n      // Just update this one item\n      const updatedCart = cart.map(item => \n        item.id === itemId ? { ...item, days: newDays } : item\n      );\n      setCart(updatedCart);\n    }\n  };\n\n  // Update people in cart\n  const updatePeople = (itemId, newPeople) => {\n    if (newPeople < 1) return;\n    \n    const updatedCart = cart.map(item => \n      item.id === itemId ? { ...item, people: newPeople } : item\n    );\n    setCart(updatedCart);\n  };\n\n  // Update custom price\n  const updateCustomPrice = (itemId, newPrice) => {\n    const updatedCart = cart.map(item => {\n      if (item.id === itemId && item.customizablePrice) {\n        // Enforce min/max bounds\n        const boundedPrice = Math.min(Math.max(newPrice, item.minPrice || 0), item.maxPrice || 1000);\n        return { ...item, customPriceValue: boundedPrice };\n      }\n      return item;\n    });\n    \n    setCart(updatedCart);\n  };\n\n  // Calculate total party size (PCs + NPCs)\n  const calculateTotalPartySize = () => {\n    // Start with player characters\n    let totalSize = playerCount;\n    \n    // Add all NPCs from security services in the cart\n    cart.forEach(item => {\n      if (item.npcCount) {\n        totalSize += item.npcCount * item.quantity;\n      }\n    });\n    \n    return totalSize;\n  };\n  \n  // Calculate total cost\n  const calculateTotal = () => {\n    const totalPartySize = calculateTotalPartySize();\n    \n    return cart.reduce((total, item) => {\n      let itemCost = 0;\n      \n      // Extract numeric value and handle silver/gold conversion\n      let baseCost = item.customizablePrice && item.customPriceValue !== undefined ? \n                    item.customPriceValue : (item.cost || 0);\n      const costUnit = item.costUnit || '';\n      \n      if (costUnit.includes('silver')) {\n        baseCost = baseCost / 20; // 20 silver = 1 gold\n      }\n      \n      // Calculate based on different cost structures\n      if (costUnit.includes('/day') && !costUnit.includes('/person')) {\n        itemCost = baseCost * item.days * item.quantity;\n      } else if (costUnit.includes('/week') && !costUnit.includes('/person')) {\n        itemCost = baseCost * Math.ceil(item.days / 7) * item.quantity;\n      } else if (costUnit.includes('/person/day')) {\n        itemCost = baseCost * totalPartySize * item.days * item.quantity;\n      } else if (costUnit.includes('/person/week')) {\n        itemCost = baseCost * totalPartySize * Math.ceil(item.days / 7) * item.quantity;\n      } else if (costUnit.includes('/person') && !costUnit.includes('/day') && !costUnit.includes('/night')) {\n        itemCost = baseCost * totalPartySize * item.quantity;\n      } else if (costUnit.includes('/night') && !costUnit.includes('/person')) {\n        itemCost = baseCost * item.days * item.quantity;\n      } else if (costUnit.includes('/person/night')) {\n        itemCost = baseCost * totalPartySize * item.days * item.quantity;\n      } else if (costUnit.includes('/message') || costUnit.includes('/dose') || costUnit.includes('/application')) {\n        itemCost = baseCost * item.quantity;\n      } else if (item.baseCost) {\n        // Handle base cost + per person/day\n        const additionalCost = item.additionalCost || 0;\n        itemCost = (baseCost + (additionalCost * totalPartySize * item.days)) * item.quantity;\n      } else {\n        // Flat rate items\n        itemCost = baseCost * item.quantity;\n      }\n      \n      return total + itemCost;\n    }, 0);\n  };\n\n  // Format cost as gold/silver string\n  const formatCost = (cost) => {\n    const gold = Math.floor(cost);\n    const silver = Math.round((cost - gold) * 20);\n    \n    if (gold > 0 && silver > 0) {\n      return `${gold} gold, ${silver} silver`;\n    } else if (gold > 0) {\n      return `${gold} gold`;\n    } else {\n      return `${silver} silver`;\n    }\n  };\n\n  // Calculate item cost for display\n  const calculateItemCost = (item) => {\n    const totalPartySize = calculateTotalPartySize();\n    \n    let itemCost = 0;\n    \n    // Extract numeric value and handle silver/gold conversion\n    let baseCost = item.customizablePrice && item.customPriceValue !== undefined ? \n                  item.customPriceValue : (item.cost || 0);\n    const costUnit = item.costUnit || '';\n    \n    if (costUnit.includes('silver')) {\n      baseCost = baseCost / 20; // 20 silver = 1 gold\n    }\n    \n    // Calculate based on different cost structures\n    if (costUnit.includes('/day') && !costUnit.includes('/person')) {\n      itemCost = baseCost * item.days * item.quantity;\n    } else if (costUnit.includes('/week') && !costUnit.includes('/person')) {\n      itemCost = baseCost * Math.ceil(item.days / 7) * item.quantity;\n    } else if (costUnit.includes('/person/day')) {\n      itemCost = baseCost * totalPartySize * item.days * item.quantity;\n    } else if (costUnit.includes('/person/week')) {\n      itemCost = baseCost * totalPartySize * Math.ceil(item.days / 7) * item.quantity;\n    } else if (costUnit.includes('/person') && !costUnit.includes('/day') && !costUnit.includes('/night')) {\n      itemCost = baseCost * totalPartySize * item.quantity;\n    } else if (costUnit.includes('/night') && !costUnit.includes('/person')) {\n      itemCost = baseCost * item.days * item.quantity;\n    } else if (costUnit.includes('/person/night')) {\n      itemCost = baseCost * totalPartySize * item.days * item.quantity;\n    } else if (costUnit.includes('/message') || costUnit.includes('/dose') || costUnit.includes('/application')) {\n      itemCost = baseCost * item.quantity;\n    } else if (item.baseCost) {\n      // Handle base cost + per person/day\n      const additionalCost = item.additionalCost || 0;\n      itemCost = (baseCost + (additionalCost * totalPartySize * item.days)) * item.quantity;\n    } else {\n      // Flat rate items\n      itemCost = baseCost * item.quantity;\n    }\n    \n    return itemCost;\n  };\n\n  // Handle tab change\n  const handleTabChange = (tabId) => {\n    setActiveTab(tabId);\n    // Set default category for the new tab\n    setActiveCategory(tabs.find(tab => tab.id === tabId).categories[0]);\n  };\n\n  // Handle category change\n  const handleCategoryChange = (categoryId) => {\n    setActiveCategory(categoryId);\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen bg-gray-900 text-white font-sans\">\n      {/* Header */}\n      <header className=\"bg-gray-800 border-b border-gray-700 p-4 flex justify-between items-center\">\n        <div className=\"flex items-center space-x-2\">\n          <Scroll size={24} className=\"text-amber-500\" />\n          <h1 className=\"text-xl font-bold text-amber-500\">Ederian Travel Tracker</h1>\n        </div>\n        <div className=\"flex space-x-4 items-center\">\n          <div className=\"bg-gray-900 p-2 rounded flex items-center mr-2\">\n            <span className=\"text-sm text-gray-400 mr-2\">PCs:</span>\n            <button \n              className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n              onClick={() => setPlayerCount(Math.max(1, playerCount - 1))}\n            >\n              <Minus size={14} />\n            </button>\n            <span className=\"mx-2 w-6 text-center\">{playerCount}</span>\n            <button \n              className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n              onClick={() => setPlayerCount(playerCount + 1)}\n            >\n              <Plus size={14} />\n            </button>\n          </div>\n          \n          <div className=\"bg-gray-900 p-2 rounded flex items-center mr-2\">\n            <span className=\"text-sm text-gray-400 mr-2\">NPCs:</span>\n            <span className=\"w-6 text-center\">{calculateTotalPartySize() - playerCount}</span>\n          </div>\n          \n          <div className=\"bg-gray-900 p-2 rounded flex items-center mr-2\">\n            <div className=\"flex items-center space-x-2\">\n              <div>\n                <label className=\"text-sm text-gray-400 mr-2\">Standard Travel Days:</label>\n                <div className=\"flex items-center\">\n                  <button \n                    className={`px-3 py-1 text-xs rounded-l ${standardDaysEnabled ? 'bg-amber-600 text-white' : 'bg-gray-700 text-gray-300'}`}\n                    onClick={() => setStandardDaysEnabled(true)}\n                  >\n                    ON\n                  </button>\n                  <button \n                    className={`px-3 py-1 text-xs rounded-r ${!standardDaysEnabled ? 'bg-amber-600 text-white' : 'bg-gray-700 text-gray-300'}`}\n                    onClick={() => setStandardDaysEnabled(false)}\n                  >\n                    OFF\n                  </button>\n                </div>\n              </div>\n              {standardDaysEnabled && (\n                <div className=\"flex items-center\">\n                  <button \n                    className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n                    onClick={() => setStandardDays(Math.max(1, standardDays - 1))}\n                  >\n                    <Minus size={14} />\n                  </button>\n                  <span className=\"mx-2 w-6 text-center\">{standardDays}</span>\n                  <button \n                    className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n                    onClick={() => {\n                      const newDays = standardDays + 1;\n                      setStandardDays(newDays);\n                      // Update all items in cart\n                      const updatedCart = cart.map(item => ({...item, days: newDays}));\n                      setCart(updatedCart);\n                    }}\n                  >\n                    <Plus size={14} />\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <button \n            className=\"bg-amber-600 hover:bg-amber-700 p-2 rounded flex items-center space-x-1\"\n            onClick={() => setSidebarOpen(!sidebarOpen)}\n          >\n            <ShoppingCart size={20} />\n            <span>Cart ({cart.length})</span>\n          </button>\n        </div>\n      </header>\n\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-y-auto p-4\">\n          {/* Tab Navigation */}\n          <div className=\"mb-4 flex overflow-x-auto pb-2 scrollbar-thin scrollbar-thumb-gray-700\">\n            {tabs.map(tab => (\n              <button\n                key={tab.id}\n                className={`flex items-center px-4 py-2 mr-2 rounded-lg transition-colors ${\n                  activeTab === tab.id \n                    ? 'bg-gray-700 text-amber-500 border border-amber-700' \n                    : 'bg-gray-800 hover:bg-gray-700'\n                }`}\n                onClick={() => handleTabChange(tab.id)}\n              >\n                <span className=\"mr-2\">{tab.icon}</span>\n                {tab.label}\n              </button>\n            ))}\n          </div>\n          \n          {/* Category Selection */}\n          <div className=\"mb-6 flex flex-wrap gap-2\">\n            {tabs.find(tab => tab.id === activeTab).categories.map(category => (\n              <button\n                key={category}\n                className={`px-3 py-1 text-sm rounded-full transition-colors ${\n                  activeCategory === category \n                    ? 'bg-amber-600 text-white' \n                    : 'bg-gray-800 hover:bg-gray-700'\n                }`}\n                onClick={() => handleCategoryChange(category)}\n              >\n                {categoryLabels[category]}\n              </button>\n            ))}\n          </div>\n          \n          {/* Route Planner - only show in travel tab */}\n          {activeTab === 'travel' && (\n            <div className=\"mb-6\">\n              <RoutePlanner \n                travelData={travelData} \n                playerCount={playerCount} \n                addToCart={addToCart} \n              />\n            </div>\n          )}\n          \n          {/* Items Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {travelData[activeTab][activeCategory].map(item => (\n              <div key={item.id}\n                className={`bg-gray-800 rounded-lg overflow-hidden border border-gray-700 hover:border-amber-600 transition-colors ${\n                  item.isInfo ? 'opacity-80' : ''\n                }`}\n              >\n                <div className=\"p-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center\">\n                      <span className=\"text-2xl mr-2\">{item.image}</span>\n                      <h3 className=\"text-lg font-semibold\">{item.name}</h3>\n                    </div>\n                    {!item.isInfo && (\n                      <button\n                        className=\"bg-amber-600 hover:bg-amber-700 p-1.5 rounded-full\"\n                        onClick={() => addToCart(item)}\n                      >\n                        <Plus size={16} />\n                      </button>\n                    )}\n                  </div>\n                  \n                  <div className=\"mt-2\">\n                    <div className=\"text-amber-500 font-medium\">\n                      {item.cost} {item.costUnit || ''}\n                      {item.baseCost && item.additionalCost && ` + ${item.additionalCost} ${item.additionalCostUnit || ''}`}\n                    </div>\n                    {item.speed && (\n                      <div className=\"text-gray-400 text-sm\">{item.speed}</div>\n                    )}\n                    {item.npcCount && (\n                      <div className=\"text-gray-300 text-sm mt-1\">NPCs: {item.npcCount}</div>\n                    )}\n                    <p className=\"text-gray-400 text-sm mt-1\">{item.notes || ''}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </main>\n\n        {/* Sidebar Cart */}\n        <aside className={`w-96 bg-gray-800 border-l border-gray-700 transform transition-transform ${\n          sidebarOpen ? 'translate-x-0' : 'translate-x-full'\n        } fixed right-0 top-0 h-screen overflow-y-auto z-10 p-4`}>\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-bold text-amber-500 flex items-center\">\n              <ShoppingCart size={20} className=\"mr-2\" />\n              Your Selection\n            </h2>\n            <button \n              className=\"text-gray-400 hover:text-white\"\n              onClick={() => setSidebarOpen(false)}\n            >\n              <X size={20} />\n            </button>\n          </div>\n\n          {cart.length === 0 ? (\n            <div className=\"text-gray-400 p-4 text-center\">\n              <div className=\"text-4xl mb-2\">🛒</div>\n              <p>Your cart is empty</p>\n              <p className=\"text-sm mt-2\">Add items from the catalog to begin tracking costs</p>\n            </div>\n          ) : (\n            <>\n              <div className=\"space-y-4\">\n                {cart.map(item => (\n                  <div key={item.id} className=\"bg-gray-900 rounded-lg p-3 relative\">\n                    <button \n                      className=\"absolute top-2 right-2 text-gray-500 hover:text-red-500\"\n                      onClick={() => removeFromCart(item.id)}\n                    >\n                      <X size={16} />\n                    </button>\n                    \n                    <div className=\"flex items-start mb-2\">\n                      <span className=\"text-2xl mr-2\">{item.image}</span>\n                      <div>\n                        <h4 className=\"font-medium\">{item.name}</h4>\n                        <div className=\"text-sm text-amber-500\">\n                          {item.cost} {item.costUnit || ''}\n                          {item.baseCost && item.additionalCost && ` + ${item.additionalCost} ${item.additionalCostUnit || ''}`}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2 mt-3\">\n                      {item.npcCount ? (\n                        <div className=\"mb-2 bg-gray-700 p-2 rounded text-sm\">\n                          <span className=\"text-amber-400\">+{item.npcCount}</span> NPCs added to party\n                        </div>\n                      ) : null}\n                    \n                      <div className=\"flex items-center justify-between\">\n                        <label className=\"text-sm text-gray-400\">Quantity:</label>\n                        <div className=\"flex items-center\">\n                          <button \n                            className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n                            onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                          >\n                            <Minus size={14} />\n                          </button>\n                          <span className=\"mx-2 w-6 text-center\">{item.quantity}</span>\n                          <button \n                            className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n                            onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                          >\n                            <Plus size={14} />\n                          </button>\n                        </div>\n                      </div>\n                      \n                      {/* Only show days input for items with day-based pricing */}\n                      {(item.costUnit.includes('/day') || item.costUnit.includes('/night') || item.costUnit.includes('/week') || item.baseCost) && (\n                        <div className=\"flex items-center justify-between\">\n                          <label className=\"text-sm text-gray-400\">Days:</label>\n                          <div className=\"flex items-center\">\n                            {standardDaysEnabled ? (\n                              <div className=\"bg-amber-700 text-xs px-2 py-1 rounded text-white\">\n                                Standardized: {standardDays}\n                              </div>\n                            ) : (\n                              <>\n                                <button \n                                  className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n                                  onClick={() => updateDays(item.id, item.days - 1)}\n                                >\n                                  <Minus size={14} />\n                                </button>\n                                <span className=\"mx-2 w-6 text-center\">{item.days}</span>\n                                <button \n                                  className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n                                  onClick={() => updateDays(item.id, item.days + 1)}\n                                >\n                                  <Plus size={14} />\n                                </button>\n                              </>\n                            )}\n                          </div>\n                        </div>\n                      )}\n                      \n                      {/* Customizable price field */}\n                      {item.customizablePrice && (\n                        <div className=\"flex items-center justify-between mt-2\">\n                          <label className=\"text-sm text-gray-400\">Custom Gift (per person):</label>\n                          <div className=\"flex items-center\">\n                            <input\n                              type=\"number\"\n                              min={item.minPrice || 0}\n                              max={item.maxPrice || 100}\n                              value={item.customPriceValue}\n                              onChange={(e) => updateCustomPrice(item.id, parseInt(e.target.value) || 0)}\n                              className=\"w-16 bg-gray-700 border border-gray-600 rounded p-1 text-center text-white\"\n                            />\n                            <span className=\"ml-1 text-amber-500\">gold</span>\n                          </div>\n                        </div>\n                      )}\n                      \n                      {/* Only show people input for items with per-person pricing */}\n                      {(item.perPerson) && (\n                        <div className=\"flex items-center justify-between\">\n                          <label className=\"text-sm text-gray-400\">People:</label>\n                          <div className=\"flex items-center\">\n                            <button \n                              className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n                              onClick={() => updatePeople(item.id, item.people - 1)}\n                            >\n                              <Minus size={14} />\n                            </button>\n                            <span className=\"mx-2 w-6 text-center\">{item.people}</span>\n                            <button \n                              className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n                              onClick={() => updatePeople(item.id, item.people + 1)}\n                            >\n                              <Plus size={14} />\n                            </button>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className=\"mt-3 text-right font-medium\">\n                      Subtotal: {formatCost(calculateItemCost(item))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"mt-6 border-t border-gray-700 pt-4\">\n                <div className=\"flex justify-between items-center mb-3\">\n                  <span className=\"text-gray-400 text-sm\">Total Party Size:</span>\n                  <span className=\"text-white\">{calculateTotalPartySize()} ({playerCount} PCs + {calculateTotalPartySize() - playerCount} NPCs)</span>\n                </div>\n                <div className=\"flex justify-between text-lg font-bold mb-1\">\n                  <span>Total:</span>\n                  <span className=\"text-amber-500\">{formatCost(calculateTotal())}</span>\n                </div>\n                <p className=\"text-xs text-gray-400\">All requisitions by the King's Hand must be properly documented and submitted to the Royal Treasurer's office within 30 days.</p>\n              </div>\n              \n              <button className=\"w-full bg-amber-600 hover:bg-amber-700 font-bold py-2 rounded-lg mt-4 flex items-center justify-center\">\n                <Scroll size={16} className=\"mr-2\" />\n                Generate Requisition Order\n              </button>\n            </>\n          )}\n        </aside>\n      </div>\n      \n      {/* Bottom Bar - Total */}\n      <footer className=\"bg-gray-800 border-t border-gray-700 p-3 sticky bottom-0\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Info size={16} className=\"text-gray-400\" />\n              <span className=\"text-sm text-gray-400\">\n                {cart.length} items selected\n              </span>\n            </div>\n            <div className=\"text-sm border-l border-gray-600 pl-4\">\n              <span className=\"text-gray-400\">Total Party Size: </span>\n              <span className=\"font-medium text-white\">{calculateTotalPartySize()}</span>\n              <span className=\"text-gray-500 text-xs ml-1\">({playerCount} PCs + {calculateTotalPartySize() - playerCount} NPCs)</span>\n            </div>\n          </div>\n          <div className=\"flex items-center\">\n            <span className=\"mr-2\">Total Cost:</span>\n            <span className=\"text-lg font-bold text-amber-500\">{formatCost(calculateTotal())}</span>\n          </div>\n          <button \n            className=\"bg-gray-700 hover:bg-gray-600 p-2 rounded flex items-center space-x-1\"\n            onClick={() => setSidebarOpen(true)}\n          >\n            <ShoppingCart size={16} />\n            <span>View Cart</span>\n            <ChevronRight size={16} />\n          </button>\n        </div>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}