{"version":3,"sources":["RouteMapVisualization.js","RoutePlanner.js","RequisitionOrder.js","App.js","reportWebVitals.js","index.js"],"names":["getAvailableModes","fromCity","toCity","cityGraph","connection","modes","Array","isArray","Object","keys","RouteMapVisualization","_ref","route","canvasRef","useRef","useEffect","valid","current","canvas","ctx","getContext","width","height","fillStyle","fillRect","cityPositions","allCities","centerX","centerY","radius","Math","min","routeCities","path","segmentAngle","PI","length","startAngle","forEach","city","index","angle","x","cos","y","sin","inRoute","random","distance","lineWidth","strokeStyle","fromPos","neighbor","toPos","beginPath","moveTo","lineTo","stroke","i","segments","segment","from","to","strokeColor","mode","atan2","midX","midY","closePath","fill","pos","arc","font","textAlign","textBaseline","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","fillText","legendY","legendX","modesUsed","Set","map","s","has","React","createElement","className","ref","defaultCityGraph","getTransportSpeed","transportMode","travelData","travel","modeData","standard","item","id","premium","speed","speedMatch","match","parseInt","getDistance","includes","calculateSegmentCost","playerCount","daysRequired","ceil","cost","costUnit","baseCost","RoutePlanner","addToCart","origin","setOrigin","useState","destination","setDestination","setTransportMode","prioritize","setPrioritize","setRoute","setCityGraph","resultsCollapsed","setResultsCollapsed","async","response","fetch","ok","console","warn","status","log","data","json","error","loadTravelData","cities","availableTransportModes","getAvailableTransportModes","allModes","extractModes","add","Navigation","size","value","onChange","e","target","key","filter","onClick","Clock","DollarSign","Compass","_travelData$travel","_travelData$travel2","find","name","calculateRoute","result","graph","start","end","optimize","distances","previous","unvisited","bestModes","Infinity","smallestDistance","delete","availableModes","edgeWeight","routeDistance","bestMode","fastestTime","time","cheapestCost","comfortRanking","mostComfortable","comfortTime","comfortLevel","undefined","totalWeight","prev","unshift","modeInfo","weight","findShortestPath","totalTime","calculateTotalTravelTime","totalCost","calculateTotalCost","disabled","Map","ChevronRight","ChevronDown","join","reduce","total","days","wholeDays","floor","hours","round","formatTime","gold","silver","formatCost","addRouteToCart","itemsToAdd","transportItem","segmentInfo","preserveDays","routeSegment","PlaneTakeoff","RequisitionOrder","isOpen","onClose","cart","document","body","style","overflow","printRef","today","Date","formattedDate","getMonth","getDate","getFullYear","requisitionNumber","totalNPCs","npcCount","quantity","groupedItems","groups","category","push","backgroundImage","backgroundSize","backgroundPosition","color","X","fontFamily","entries","_ref2","items","perPerson","people","App","activeTab","setActiveTab","activeCategory","setActiveCategory","setCart","sidebarOpen","setSidebarOpen","setPlayerCount","standardDaysEnabled","setStandardDaysEnabled","standardDays","setStandardDays","showRequisition","setShowRequisition","notes","image","security","watch","mercenary","potential","isInfo","specialized","provisions","daily","additionalCost","additionalCostUnit","accommodations","lodging","customizablePrice","minPrice","maxPrice","administrative","magical","services","special","intelligence","resources","tabs","label","icon","categories","Shield","Coffee","Home","Sparkles","Crown","categoryLabels","isMultiple","arguments","prevCart","newCart","singleItem","existingItemIndex","findIndex","cartItem","daysValue","itemToAdd","customPriceValue","updatedCart","updateQuantity","itemId","newQuantity","updateDays","newDays","updatePeople","newPeople","calculateTotalPartySize","totalSize","calculateTotal","totalPartySize","itemCost","Scroll","max","Minus","Plus","ShoppingCart","tab","handleTabChange","tabId","Fragment","removeFromCart","type","updateCustomPrice","newPrice","boundedPrice","calculateItemCost","Info","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.cbb2b599.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\n\r\n// Helper function to get available modes between two cities\r\nfunction getAvailableModes(fromCity, toCity, cityGraph) {\r\n  if (!cityGraph[fromCity] || !cityGraph[fromCity][toCity]) {\r\n    return [];\r\n  }\r\n  \r\n  const connection = cityGraph[fromCity][toCity];\r\n  \r\n  // Check connection format\r\n  if (connection.modes && typeof connection.modes === 'object' && !Array.isArray(connection.modes)) {\r\n    // New format with mode-specific distances\r\n    return Object.keys(connection.modes);\r\n  } else if (connection.modes && Array.isArray(connection.modes)) {\r\n    // Old format with a single distance for all modes\r\n    return connection.modes;\r\n  }\r\n  \r\n  return [];\r\n}\r\n\r\nfunction RouteMapVisualization({ route, cityGraph }) {\r\n  const canvasRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    if (!route || !route.valid || !canvasRef.current) return;\r\n    \r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    const width = canvas.width;\r\n    const height = canvas.height;\r\n    \r\n    // Clear canvas\r\n    ctx.fillStyle = '#1F2937';\r\n    ctx.fillRect(0, 0, width, height);\r\n    \r\n    // Create positions for all cities (simple circular layout)\r\n    const cityPositions = {};\r\n    const allCities = Object.keys(cityGraph);\r\n    const centerX = width / 2;\r\n    const centerY = height / 2;\r\n    const radius = Math.min(width, height) / 2.5;\r\n    \r\n    // First position the cities in the route path in a line\r\n    const routeCities = route.path;\r\n    const segmentAngle = Math.PI * 1.5 / (routeCities.length - 1 || 1);\r\n    let startAngle = Math.PI / 4;\r\n    \r\n    routeCities.forEach((city, index) => {\r\n      const angle = startAngle + segmentAngle * index;\r\n      cityPositions[city] = {\r\n        x: centerX + Math.cos(angle) * radius,\r\n        y: centerY + Math.sin(angle) * radius,\r\n        inRoute: true\r\n      };\r\n    });\r\n    \r\n    // Position remaining cities randomly\r\n    allCities.forEach(city => {\r\n      if (!cityPositions[city]) {\r\n        const angle = Math.random() * Math.PI * 2;\r\n        const distance = radius * (0.6 + Math.random() * 0.4);\r\n        cityPositions[city] = {\r\n          x: centerX + Math.cos(angle) * distance,\r\n          y: centerY + Math.sin(angle) * distance,\r\n          inRoute: false\r\n        };\r\n      }\r\n    });\r\n    \r\n    // Draw connections between all cities\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeStyle = '#4B5563';\r\n    \r\n    for (const city in cityGraph) {\r\n      const fromPos = cityPositions[city];\r\n      \r\n      for (const neighbor in cityGraph[city]) {\r\n        const toPos = cityPositions[neighbor];\r\n        \r\n        // Skip if this connection has no available modes\r\n        const modes = getAvailableModes(city, neighbor, cityGraph);\r\n        if (modes.length === 0) continue;\r\n        \r\n        ctx.beginPath();\r\n        ctx.moveTo(fromPos.x, fromPos.y);\r\n        ctx.lineTo(toPos.x, toPos.y);\r\n        ctx.stroke();\r\n      }\r\n    }\r\n    \r\n    // Draw the route path with thicker lines and different color\r\n    ctx.lineWidth = 4;\r\n    \r\n    for (let i = 0; i < route.segments.length; i++) {\r\n      const segment = route.segments[i];\r\n      const fromPos = cityPositions[segment.from];\r\n      const toPos = cityPositions[segment.to];\r\n      \r\n      // Skip if positions aren't available\r\n      if (!fromPos || !toPos) continue;\r\n      \r\n      // Color based on transport mode\r\n      let strokeColor;\r\n      switch (segment.mode) {\r\n        case 'airship-ederia':\r\n        case 'airship-bordering':\r\n        case 'airship-distant':\r\n          strokeColor = '#9333EA'; // Purple for airships\r\n          break;\r\n        case 'ryanite-rail-1st':\r\n        case 'ryanite-rail-standard':\r\n        case 'expedited-rail':\r\n          strokeColor = '#2563EB'; // Blue for rail\r\n          break;\r\n        case 'ship-private':\r\n        case 'ship-shared':\r\n          strokeColor = '#0891B2'; // Cyan for ships\r\n          break;\r\n        case 'caravan':\r\n          strokeColor = '#D97706'; // Amber for caravans\r\n          break;\r\n        case 'swift-rider':\r\n          strokeColor = '#DC2626'; // Red for swift riders\r\n          break;\r\n        default:\r\n          strokeColor = '#D97706'; // Default amber\r\n      }\r\n      \r\n      ctx.strokeStyle = strokeColor;\r\n      ctx.beginPath();\r\n      ctx.moveTo(fromPos.x, fromPos.y);\r\n      ctx.lineTo(toPos.x, toPos.y);\r\n      ctx.stroke();\r\n      \r\n      // Draw a directional arrow\r\n      const angle = Math.atan2(toPos.y - fromPos.y, toPos.x - fromPos.x);\r\n      const midX = (fromPos.x + toPos.x) / 2;\r\n      const midY = (fromPos.y + toPos.y) / 2;\r\n      \r\n      ctx.beginPath();\r\n      ctx.moveTo(midX, midY);\r\n      ctx.lineTo(\r\n        midX - 10 * Math.cos(angle - Math.PI / 6),\r\n        midY - 10 * Math.sin(angle - Math.PI / 6)\r\n      );\r\n      ctx.lineTo(\r\n        midX - 10 * Math.cos(angle + Math.PI / 6),\r\n        midY - 10 * Math.sin(angle + Math.PI / 6)\r\n      );\r\n      ctx.closePath();\r\n      ctx.fillStyle = strokeColor;\r\n      ctx.fill();\r\n    }\r\n    \r\n    // Draw cities\r\n    for (const city in cityPositions) {\r\n      const pos = cityPositions[city];\r\n      \r\n      // City dot\r\n      ctx.beginPath();\r\n      ctx.arc(pos.x, pos.y, pos.inRoute ? 10 : 6, 0, Math.PI * 2);\r\n      \r\n      if (city === route.path[0]) {\r\n        // Origin\r\n        ctx.fillStyle = '#10B981'; // Green\r\n        ctx.strokeStyle = '#FFFFFF'; // White border\r\n        ctx.lineWidth = 2;\r\n        ctx.stroke();\r\n      } else if (city === route.path[route.path.length - 1]) {\r\n        // Destination\r\n        ctx.fillStyle = '#DC2626'; // Red\r\n        ctx.strokeStyle = '#FFFFFF'; // White border\r\n        ctx.lineWidth = 2;\r\n        ctx.stroke();\r\n      } else if (pos.inRoute) {\r\n        // Cities in route\r\n        ctx.fillStyle = '#F59E0B'; // Amber\r\n      } else {\r\n        // Other cities\r\n        ctx.fillStyle = '#6B7280'; // Gray\r\n      }\r\n      \r\n      ctx.fill();\r\n      \r\n      // City label\r\n      ctx.font = pos.inRoute ? 'bold 14px sans-serif' : '12px sans-serif';\r\n      ctx.fillStyle = pos.inRoute ? '#FFFFFF' : '#F3F4F6';\r\n      ctx.textAlign = 'center';\r\n      ctx.textBaseline = 'bottom';\r\n      \r\n      // Add a subtle text shadow for better readability\r\n      ctx.shadowColor = 'rgba(0, 0, 0, 0.8)';\r\n      ctx.shadowBlur = 4;\r\n      ctx.shadowOffsetX = 1;\r\n      ctx.shadowOffsetY = 1;\r\n      \r\n      ctx.fillText(city, pos.x, pos.y - 12);\r\n      \r\n      // Reset shadow\r\n      ctx.shadowColor = 'transparent';\r\n      ctx.shadowBlur = 0;\r\n      ctx.shadowOffsetX = 0;\r\n      ctx.shadowOffsetY = 0;\r\n    }\r\n    \r\n    // Draw legend\r\n    const legendY = height - 30;\r\n    let legendX = 20;\r\n    \r\n    // Transport modes used in this route\r\n    const modesUsed = new Set(route.segments.map(s => s.mode));\r\n    \r\n    if (modesUsed.has('airship-ederia') || modesUsed.has('airship-bordering') || modesUsed.has('airship-distant')) {\r\n      ctx.fillStyle = '#9333EA';\r\n      ctx.fillRect(legendX, legendY, 25, 4);\r\n      ctx.font = '12px sans-serif';\r\n      ctx.fillStyle = '#FFFFFF';\r\n      ctx.textAlign = 'left';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText('Airship', legendX + 30, legendY);\r\n      legendX += 100;\r\n    }\r\n    \r\n    if (modesUsed.has('ryanite-rail-1st') || modesUsed.has('ryanite-rail-standard') || modesUsed.has('expedited-rail')) {\r\n      ctx.fillStyle = '#2563EB';\r\n      ctx.fillRect(legendX, legendY, 25, 4);\r\n      ctx.font = '12px sans-serif';\r\n      ctx.fillStyle = '#FFFFFF';\r\n      ctx.textAlign = 'left';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText('Rail', legendX + 30, legendY);\r\n      legendX += 100;\r\n    }\r\n    \r\n    if (modesUsed.has('ship-private') || modesUsed.has('ship-shared')) {\r\n      ctx.fillStyle = '#0891B2';\r\n      ctx.fillRect(legendX, legendY, 25, 4);\r\n      ctx.font = '12px sans-serif';\r\n      ctx.fillStyle = '#FFFFFF';\r\n      ctx.textAlign = 'left';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText('Ship', legendX + 30, legendY);\r\n      legendX += 100;\r\n    }\r\n    \r\n    if (modesUsed.has('caravan')) {\r\n      ctx.fillStyle = '#D97706';\r\n      ctx.fillRect(legendX, legendY, 25, 4);\r\n      ctx.font = '12px sans-serif';\r\n      ctx.fillStyle = '#FFFFFF';\r\n      ctx.textAlign = 'left';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText('Caravan', legendX + 30, legendY);\r\n      legendX += 100;\r\n    }\r\n    \r\n    if (modesUsed.has('swift-rider')) {\r\n      ctx.fillStyle = '#DC2626';\r\n      ctx.fillRect(legendX, legendY, 25, 4);\r\n      ctx.font = '12px sans-serif';\r\n      ctx.fillStyle = '#FFFFFF';\r\n      ctx.textAlign = 'left';\r\n      ctx.textBaseline = 'middle';\r\n      ctx.fillText('Swift Rider', legendX + 30, legendY);\r\n    }\r\n    \r\n  }, [route, cityGraph]);\r\n  \r\n  return (\r\n    <div className=\"bg-gray-900 rounded-lg border-2 border-amber-700 p-5 h-full flex flex-col\">\r\n      <h3 className=\"text-xl font-bold text-amber-400 mb-3\">Route Map</h3>\r\n      <div className=\"flex-grow flex items-center justify-center\">\r\n        <canvas \r\n          ref={canvasRef} \r\n          width={480} \r\n          height={320} \r\n          className=\"w-full h-auto rounded-md border border-gray-700 max-w-full\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RouteMapVisualization;","import React, { useState, useEffect } from 'react';\r\nimport { Map, Navigation, Clock, DollarSign, Compass, PlaneTakeoff, ChevronRight, ChevronDown } from 'lucide-react';\r\nimport RouteMapVisualization from './RouteMapVisualization';\r\n\r\n// We'll replace this with data loaded from the JSON file\r\nconst defaultCityGraph = {\r\n  \"Royal Capital\": {\r\n    \"Thornefield\": { \r\n      distance: 100, \r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st', 'airship-ederia'] \r\n    },\r\n    \"Port Haven\": { \r\n      distance: 150, \r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st', 'ship-shared', 'ship-private', 'airship-ederia'] \r\n    },\r\n    \"Drakemoor Hold\": { \r\n      distance: 120, \r\n      modes: ['caravan', 'airship-ederia'] \r\n    },\r\n    \"Astralor Academy\": {\r\n      distance: 80,\r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st', 'airship-ederia']\r\n    }\r\n  },\r\n  \"Thornefield\": {\r\n    \"Royal Capital\": { \r\n      distance: 100, \r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st', 'airship-ederia'] \r\n    },\r\n    \"Forest Outpost\": { \r\n      distance: 75, \r\n      modes: ['caravan'] \r\n    },\r\n    \"Crossroads Inn\": { \r\n      distance: 50, \r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st'] \r\n    }\r\n  },\r\n  \"Port Haven\": {\r\n    \"Royal Capital\": {\r\n      distance: 150,\r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st', 'ship-shared', 'ship-private', 'airship-ederia']\r\n    },\r\n    \"Veltaris Harbor\": {\r\n      distance: 120,\r\n      modes: ['caravan', 'ship-shared', 'ship-private']\r\n    },\r\n    \"Eastern Shores\": {\r\n      distance: 200,\r\n      modes: ['ship-shared', 'ship-private']\r\n    }\r\n  },\r\n  \"Drakemoor Hold\": {\r\n    \"Royal Capital\": {\r\n      distance: 120,\r\n      modes: ['caravan', 'airship-ederia']\r\n    },\r\n    \"Mountain Pass\": {\r\n      distance: 80,\r\n      modes: ['caravan']\r\n    }\r\n  },\r\n  \"Astralor Academy\": {\r\n    \"Royal Capital\": {\r\n      distance: 80,\r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st', 'airship-ederia']\r\n    },\r\n    \"Arcane Outpost\": {\r\n      distance: 100,\r\n      modes: ['caravan', 'airship-ederia']\r\n    }\r\n  },\r\n  \"Forest Outpost\": {\r\n    \"Thornefield\": {\r\n      distance: 75,\r\n      modes: ['caravan']\r\n    }\r\n  },\r\n  \"Crossroads Inn\": {\r\n    \"Thornefield\": {\r\n      distance: 50,\r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st']\r\n    },\r\n    \"Trade Junction\": {\r\n      distance: 60,\r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st']\r\n    }\r\n  },\r\n  \"Veltaris Harbor\": {\r\n    \"Port Haven\": {\r\n      distance: 120,\r\n      modes: ['caravan', 'ship-shared', 'ship-private']\r\n    },\r\n    \"Coastal Fortress\": {\r\n      distance: 70,\r\n      modes: ['caravan', 'ship-shared', 'ship-private']\r\n    }\r\n  },\r\n  \"Eastern Shores\": {\r\n    \"Port Haven\": {\r\n      distance: 200,\r\n      modes: ['ship-shared', 'ship-private']\r\n    }\r\n  },\r\n  \"Mountain Pass\": {\r\n    \"Drakemoor Hold\": {\r\n      distance: 80,\r\n      modes: ['caravan']\r\n    },\r\n    \"Border Crossing\": {\r\n      distance: 100,\r\n      modes: ['caravan']\r\n    }\r\n  },\r\n  \"Arcane Outpost\": {\r\n    \"Astralor Academy\": {\r\n      distance: 100,\r\n      modes: ['caravan', 'airship-ederia']\r\n    }\r\n  },\r\n  \"Trade Junction\": {\r\n    \"Crossroads Inn\": {\r\n      distance: 60,\r\n      modes: ['caravan', 'ryanite-rail-standard', 'ryanite-rail-1st']\r\n    }\r\n  },\r\n  \"Coastal Fortress\": {\r\n    \"Veltaris Harbor\": {\r\n      distance: 70,\r\n      modes: ['caravan', 'ship-shared', 'ship-private']\r\n    }\r\n  },\r\n  \"Border Crossing\": {\r\n    \"Mountain Pass\": {\r\n      distance: 100,\r\n      modes: ['caravan']\r\n    }\r\n  }\r\n};\r\n\r\n// Helper functions for route calculations\r\nfunction getTransportSpeed(transportMode, travelData) {\r\n  if (!travelData || !travelData.travel) return 24; // Default to caravan speed if travelData isn't available\r\n  \r\n  let modeData = null;\r\n  \r\n  // Search in standard travel options\r\n  if (travelData.travel.standard) {\r\n    for (const item of travelData.travel.standard) {\r\n      if (item.id === transportMode) {\r\n        modeData = item;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Search in premium travel options if not found\r\n  if (!modeData && travelData.travel.premium) {\r\n    for (const item of travelData.travel.premium) {\r\n      if (item.id === transportMode) {\r\n        modeData = item;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (!modeData || !modeData.speed) return 24; // Default to caravan speed\r\n  \r\n  // Extract numeric value from speed string\r\n  const speedMatch = modeData.speed.match(/(\\d+)/);\r\n  return speedMatch ? parseInt(speedMatch[1]) : 24;\r\n}\r\n\r\n// Helper function to get the distance for a specific mode between two cities\r\nfunction getDistance(fromCity, toCity, mode, cityGraph) {\r\n  if (!cityGraph[fromCity] || !cityGraph[fromCity][toCity]) {\r\n    return null; // No direct connection\r\n  }\r\n  \r\n  const connection = cityGraph[fromCity][toCity];\r\n  \r\n  // Check if the connection has mode-specific distances\r\n  if (connection.modes && typeof connection.modes === 'object' && !Array.isArray(connection.modes)) {\r\n    // New format with mode-specific distances\r\n    if (connection.modes[mode] && connection.modes[mode].distance) {\r\n      return connection.modes[mode].distance;\r\n    }\r\n    \r\n    // Mode not available for this route\r\n    return null;\r\n  } else if (connection.modes && Array.isArray(connection.modes)) {\r\n    // Old format with a single distance for all modes\r\n    if (connection.modes.includes(mode)) {\r\n      return connection.distance;\r\n    }\r\n    \r\n    // Mode not available for this route\r\n    return null;\r\n  }\r\n  \r\n  // Invalid connection format\r\n  return null;\r\n}\r\n\r\nfunction calculateSegmentCost(transportMode, distance, travelData, playerCount) {\r\n  if (!travelData || !travelData.travel) return 0; // Return 0 if travelData isn't available\r\n  \r\n  let modeData = null;\r\n  \r\n  // Search in standard travel options\r\n  if (travelData.travel.standard) {\r\n    for (const item of travelData.travel.standard) {\r\n      if (item.id === transportMode) {\r\n        modeData = item;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Search in premium travel options if not found\r\n  if (!modeData && travelData.travel.premium) {\r\n    for (const item of travelData.travel.premium) {\r\n      if (item.id === transportMode) {\r\n        modeData = item;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  \r\n  if (!modeData) return 0;\r\n  \r\n  const speed = getTransportSpeed(transportMode, travelData);\r\n  // Round up to full days for cost calculation purposes\r\n  const daysRequired = Math.ceil(distance / speed);\r\n  \r\n  let cost = 0;\r\n  const costUnit = modeData.costUnit || '';\r\n  \r\n  // Convert silver to gold for calculations\r\n  let baseCost = modeData.cost || 0;\r\n  if (costUnit.includes('silver')) {\r\n    baseCost = baseCost / 20; // 20 silver = 1 gold\r\n  }\r\n  \r\n  // Calculate based on cost structure\r\n  if (costUnit.includes('/day') && !costUnit.includes('/person')) {\r\n    cost = baseCost * daysRequired;\r\n  } else if (costUnit.includes('/week')) {\r\n    cost = baseCost * Math.ceil(daysRequired / 7);\r\n  } else if (costUnit.includes('/person/day')) {\r\n    cost = baseCost * playerCount * daysRequired;\r\n  } else if (costUnit.includes('/person/week')) {\r\n    cost = baseCost * playerCount * Math.ceil(daysRequired / 7);\r\n  } else {\r\n    // Flat rate\r\n    cost = baseCost;\r\n  }\r\n  \r\n  return cost;\r\n}\r\n\r\nfunction getMaxSpeed(modes, travelData) {\r\n  let maxSpeed = 0;\r\n  \r\n  for (const mode of modes) {\r\n    const speed = getTransportSpeed(mode, travelData);\r\n    if (speed > maxSpeed) {\r\n      maxSpeed = speed;\r\n    }\r\n  }\r\n  \r\n  return maxSpeed || 24; // Default to caravan speed if no modes available\r\n}\r\n\r\n// Helper function to get all available modes between two cities\r\nfunction getAvailableModes(fromCity, toCity, cityGraph) {\r\n  if (!cityGraph[fromCity] || !cityGraph[fromCity][toCity]) {\r\n    return [];\r\n  }\r\n  \r\n  const connection = cityGraph[fromCity][toCity];\r\n  \r\n  // Check connection format\r\n  if (connection.modes && typeof connection.modes === 'object' && !Array.isArray(connection.modes)) {\r\n    // New format with mode-specific distances\r\n    return Object.keys(connection.modes);\r\n  } else if (connection.modes && Array.isArray(connection.modes)) {\r\n    // Old format with a single distance for all modes\r\n    return connection.modes;\r\n  }\r\n  \r\n  return [];\r\n}\r\n\r\nfunction getMinCost(modes, distance, travelData, playerCount) {\r\n  let minCost = Infinity;\r\n  \r\n  for (const mode of modes) {\r\n    const cost = calculateSegmentCost(mode, distance, travelData, playerCount);\r\n    if (cost < minCost) {\r\n      minCost = cost;\r\n    }\r\n  }\r\n  \r\n  return minCost === Infinity ? 0 : minCost;\r\n}\r\n\r\n// Dijkstra's algorithm for finding shortest path\r\nfunction findShortestPath(graph, start, end, transportMode, optimize, travelData, playerCount) {\r\n  const distances = {};\r\n  const previous = {};\r\n  const unvisited = new Set();\r\n  const bestModes = {}; // Track best transport mode for each segment\r\n  \r\n  for (const city in graph) {\r\n    distances[city] = city === start ? 0 : Infinity;\r\n    previous[city] = null;\r\n    unvisited.add(city);\r\n    bestModes[city] = {};\r\n  }\r\n  \r\n  while (unvisited.size > 0) {\r\n    // Find the unvisited node with the smallest distance\r\n    let current = null;\r\n    let smallestDistance = Infinity;\r\n    \r\n    for (const city of unvisited) {\r\n      if (distances[city] < smallestDistance) {\r\n        smallestDistance = distances[city];\r\n        current = city;\r\n      }\r\n    }\r\n    \r\n    // If we've reached the end or there's no path, break\r\n    if (current === end || current === null || distances[current] === Infinity) {\r\n      break;\r\n    }\r\n    \r\n    unvisited.delete(current);\r\n    \r\n    // Check all neighbors of the current node\r\n    for (const neighbor in graph[current]) {\r\n      let availableModes;\r\n      \r\n      // Get available modes for this connection based on connection format\r\n      availableModes = getAvailableModes(current, neighbor, graph);\r\n      \r\n      // Skip if transport mode specified and not available for this route\r\n      if (transportMode && !availableModes.includes(transportMode)) {\r\n        continue;\r\n      }\r\n      \r\n      // Skip if there are no valid transport modes\r\n      if (availableModes.length === 0) {\r\n        continue;\r\n      }\r\n      \r\n      let edgeWeight;\r\n      let bestMode = transportMode;\r\n      let routeDistance;\r\n      \r\n      if (optimize === 'time') {\r\n        if (transportMode) {\r\n          // Use the specified transport mode\r\n          routeDistance = getDistance(current, neighbor, transportMode, graph);\r\n          if (routeDistance === null) continue; // Skip if mode not available\r\n          \r\n          const speed = getTransportSpeed(transportMode, travelData);\r\n          edgeWeight = routeDistance / speed;\r\n        } else {\r\n          // Find fastest mode available for this segment\r\n          let fastestTime = Infinity;\r\n          \r\n          for (const mode of availableModes) {\r\n            const distance = getDistance(current, neighbor, mode, graph);\r\n            if (distance === null) continue; // Skip if distance not available\r\n            \r\n            const speed = getTransportSpeed(mode, travelData);\r\n            const time = distance / speed;\r\n            \r\n            if (time < fastestTime) {\r\n              fastestTime = time;\r\n              bestMode = mode;\r\n              routeDistance = distance;\r\n            }\r\n          }\r\n          \r\n          if (fastestTime === Infinity) continue; // Skip if no valid mode found\r\n          edgeWeight = fastestTime;\r\n        }\r\n      } else if (optimize === 'cost') {\r\n        if (transportMode) {\r\n          // Use the specified transport mode\r\n          routeDistance = getDistance(current, neighbor, transportMode, graph);\r\n          if (routeDistance === null) continue; // Skip if mode not available\r\n          \r\n          edgeWeight = calculateSegmentCost(\r\n            transportMode, \r\n            routeDistance, \r\n            travelData, \r\n            playerCount\r\n          );\r\n        } else {\r\n          // Find cheapest mode available for this segment\r\n          let cheapestCost = Infinity;\r\n          \r\n          for (const mode of availableModes) {\r\n            const distance = getDistance(current, neighbor, mode, graph);\r\n            if (distance === null) continue; // Skip if distance not available\r\n            \r\n            const cost = calculateSegmentCost(\r\n              mode, \r\n              distance, \r\n              travelData, \r\n              playerCount\r\n            );\r\n            \r\n            if (cost < cheapestCost) {\r\n              cheapestCost = cost;\r\n              bestMode = mode;\r\n              routeDistance = distance;\r\n            }\r\n          }\r\n          \r\n          if (cheapestCost === Infinity) continue; // Skip if no valid mode found\r\n          edgeWeight = cheapestCost;\r\n        }\r\n      } else if (optimize === 'comfort') {\r\n        // For comfort, we'll prefer 1st class options and airships\r\n        // This is a simple heuristic - could be refined based on actual comfort metrics\r\n        const comfortRanking = {\r\n          'airship-ederia': 5,\r\n          'airship-bordering': 5,\r\n          'airship-distant': 5,\r\n          'ryanite-rail-1st': 4,\r\n          'ship-private': 4,\r\n          'expedited-rail': 3,\r\n          'ryanite-rail-standard': 2,\r\n          'ship-shared': 2,\r\n          'caravan': 1,\r\n          'swift-rider': 1\r\n        };\r\n        \r\n        if (transportMode) {\r\n          // We're still optimizing for time, but with the specified comfortable mode\r\n          routeDistance = getDistance(current, neighbor, transportMode, graph);\r\n          if (routeDistance === null) continue; // Skip if mode not available\r\n          \r\n          const speed = getTransportSpeed(transportMode, travelData);\r\n          edgeWeight = routeDistance / speed;\r\n        } else {\r\n          // Find most comfortable mode available\r\n          let mostComfortable = 0;\r\n          let comfortTime = Infinity;\r\n          \r\n          for (const mode of availableModes) {\r\n            const comfortLevel = comfortRanking[mode] || 0;\r\n            const distance = getDistance(current, neighbor, mode, graph);\r\n            if (distance === null) continue; // Skip if distance not available\r\n            \r\n            const speed = getTransportSpeed(mode, travelData);\r\n            const time = distance / speed;\r\n            \r\n            // Prioritize comfort, but use time as a tiebreaker\r\n            if (comfortLevel > mostComfortable || (comfortLevel === mostComfortable && time < comfortTime)) {\r\n              mostComfortable = comfortLevel;\r\n              comfortTime = time;\r\n              bestMode = mode;\r\n              routeDistance = distance;\r\n            }\r\n          }\r\n          \r\n          if (comfortTime === Infinity) continue; // Skip if no valid mode found\r\n          edgeWeight = comfortTime; // Still optimize for time among the most comfortable options\r\n        }\r\n      }\r\n      \r\n      // Skip if we couldn't find a valid route\r\n      if (edgeWeight === undefined || routeDistance === undefined) {\r\n        continue;\r\n      }\r\n      \r\n      const totalWeight = distances[current] + edgeWeight;\r\n      \r\n      if (totalWeight < distances[neighbor]) {\r\n        distances[neighbor] = totalWeight;\r\n        previous[neighbor] = current;\r\n        bestModes[current][neighbor] = {\r\n          mode: bestMode,\r\n          distance: routeDistance\r\n        };\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Reconstruct the path and gather segment details\r\n  const path = [];\r\n  const segments = [];\r\n  let current = end;\r\n  \r\n  while (current !== null && previous[current] !== null) {\r\n    const prev = previous[current];\r\n    path.unshift(current);\r\n    \r\n    // Get the best mode and distance for this segment\r\n    const modeInfo = bestModes[prev][current];\r\n    \r\n    if (modeInfo) {\r\n      // Add segment details\r\n      segments.unshift({\r\n        from: prev,\r\n        to: current,\r\n        distance: modeInfo.distance,\r\n        mode: modeInfo.mode\r\n      });\r\n    }\r\n    \r\n    current = prev;\r\n  }\r\n  \r\n  if (current === start) {\r\n    path.unshift(start);\r\n  }\r\n  \r\n  return {\r\n    path,\r\n    segments,\r\n    weight: distances[end],\r\n    valid: distances[end] !== Infinity && path.includes(end) && path.includes(start)\r\n  };\r\n}\r\n\r\nfunction calculateTotalTravelTime(segments, travelData) {\r\n  let totalTime = 0;\r\n  \r\n  for (const segment of segments) {\r\n    const speed = getTransportSpeed(segment.mode, travelData);\r\n    totalTime += segment.distance / speed;\r\n  }\r\n  \r\n  return totalTime;\r\n}\r\n\r\nfunction calculateTotalCost(segments, travelData, playerCount) {\r\n  let totalCost = 0;\r\n  \r\n  for (const segment of segments) {\r\n    totalCost += calculateSegmentCost(\r\n      segment.mode,\r\n      segment.distance,\r\n      travelData,\r\n      playerCount\r\n    );\r\n  }\r\n  \r\n  return totalCost;\r\n}\r\n\r\nfunction RoutePlanner({ travelData = {}, playerCount = 1, addToCart }) {\r\n  const [origin, setOrigin] = useState('');\r\n  const [destination, setDestination] = useState('');\r\n  const [transportMode, setTransportMode] = useState('');\r\n  const [prioritize, setPrioritize] = useState('time');\r\n  const [route, setRoute] = useState(null);\r\n  const [cityGraph, setCityGraph] = useState(defaultCityGraph);\r\n  const [resultsCollapsed, setResultsCollapsed] = useState(false); // Add this line\r\n  \r\n  // Load travel times data from JSON file\r\n  useEffect(() => {\r\n    const loadTravelData = async () => {\r\n      try {\r\n        // Use PUBLIC_URL to create the correct path\r\n        const response = await fetch(`${process.env.PUBLIC_URL}/data/travel-times.json`);\r\n        if (!response.ok) {\r\n          console.warn('Could not load travel times from /data. Status:', response.status);\r\n          console.log('Using default city graph data');\r\n          return;\r\n        }\r\n        \r\n        const data = await response.json();\r\n        setCityGraph(data);\r\n        console.log('Loaded travel times from /data directory');\r\n      } catch (error) {\r\n        console.error('Error loading travel times data:', error);\r\n        console.log('Using default city graph data');\r\n      }\r\n    };\r\n    \r\n    loadTravelData();\r\n  }, []);\r\n  \r\n  const cities = Object.keys(cityGraph);\r\n  \r\n  const calculateRoute = () => {\r\n    if (!origin || !destination) return;\r\n    \r\n    const result = findShortestPath(\r\n      cityGraph, \r\n      origin, \r\n      destination, \r\n      transportMode, \r\n      prioritize,\r\n      travelData,\r\n      playerCount\r\n    );\r\n    \r\n    if (result.valid) {\r\n      const totalTime = calculateTotalTravelTime(result.segments, travelData);\r\n      const totalCost = calculateTotalCost(result.segments, travelData, playerCount);\r\n      \r\n      setRoute({\r\n        ...result,\r\n        totalTime,\r\n        totalCost\r\n      });\r\n    } else {\r\n      setRoute(result);\r\n    }\r\n  };\r\n  \r\n  // Get available transport modes between all cities\r\n  const getAvailableTransportModes = () => {\r\n    if (!origin || !destination) return [];\r\n    \r\n    // Get all available modes across all cities\r\n    const allModes = new Set();\r\n    \r\n    // Helper function to check connection format and extract modes\r\n    const extractModes = (connection) => {\r\n      if (!connection) return [];\r\n      \r\n      if (connection.modes && typeof connection.modes === 'object' && !Array.isArray(connection.modes)) {\r\n        // New format with mode-specific distances\r\n        return Object.keys(connection.modes);\r\n      } else if (connection.modes && Array.isArray(connection.modes)) {\r\n        // Old format with a single distance for all modes\r\n        return connection.modes;\r\n      }\r\n      \r\n      return [];\r\n    };\r\n    \r\n    // If cities are directly connected\r\n    if (cityGraph[origin] && cityGraph[origin][destination]) {\r\n      return extractModes(cityGraph[origin][destination]);\r\n    }\r\n    \r\n    // For non-direct connections, return all possible transport modes\r\n    for (const city in cityGraph) {\r\n      for (const neighbor in cityGraph[city]) {\r\n        const modes = extractModes(cityGraph[city][neighbor]);\r\n        modes.forEach(mode => allModes.add(mode));\r\n      }\r\n    }\r\n    \r\n    return Array.from(allModes);\r\n  };\r\n  \r\n  // Filter transport modes that are available for the selected route\r\n  const availableTransportModes = getAvailableTransportModes();\r\n  \r\n  useEffect(() => {\r\n    // Reset route when inputs change\r\n    setRoute(null);\r\n  }, [origin, destination, transportMode, prioritize]);\r\n  \r\n  // Helper function to format time in days and hours\r\n  const formatTime = (days) => {\r\n    const wholeDays = Math.floor(days);\r\n    const hours = Math.round((days - wholeDays) * 24);\r\n    \r\n    if (wholeDays > 0 && hours > 0) {\r\n      return `${wholeDays} day${wholeDays !== 1 ? 's' : ''}, ${hours} hour${hours !== 1 ? 's' : ''}`;\r\n    } else if (wholeDays > 0) {\r\n      return `${wholeDays} day${wholeDays !== 1 ? 's' : ''}`;\r\n    } else {\r\n      return `${hours} hour${hours !== 1 ? 's' : ''}`;\r\n    }\r\n  };\r\n  \r\n  // Helper function to format cost as gold/silver\r\n  const formatCost = (cost) => {\r\n    const gold = Math.floor(cost);\r\n    const silver = Math.round((cost - gold) * 20);\r\n    \r\n    if (gold > 0 && silver > 0) {\r\n      return `${gold} gold, ${silver} silver`;\r\n    } else if (gold > 0) {\r\n      return `${gold} gold`;\r\n    } else {\r\n      return `${silver} silver`;\r\n    }\r\n  };\r\n  \r\n  // Add all transportation in the route to cart\r\n  const addRouteToCart = () => {\r\n    if (!route || !route.valid || !travelData || !travelData.travel) return;\r\n    \r\n    // First, collect all items to add\r\n    const itemsToAdd = route.segments.map(segment => {\r\n      // Find the transport item in travelData\r\n      const standardModes = travelData.travel.standard || [];\r\n      const premiumModes = travelData.travel.premium || [];\r\n      const allTransportItems = [\r\n        ...standardModes,\r\n        ...premiumModes\r\n      ];\r\n      \r\n      const transportItem = allTransportItems.find(item => item && item.id === segment.mode);\r\n      \r\n      if (transportItem) {\r\n        // Calculate days based on segment\r\n        const speed = getTransportSpeed(segment.mode, travelData);\r\n        const days = Math.ceil(segment.distance / speed);\r\n        \r\n        // Create a modified item with segment info and a unique ID\r\n        return {\r\n          ...transportItem,\r\n          id: `${segment.mode}-${segment.from}-${segment.to}`, // Create unique ID for each segment\r\n          segmentInfo: `${segment.from} → ${segment.to} (${segment.distance} miles)`,\r\n          days: days, // Add the calculated days\r\n          preserveDays: true, // Flag to preserve days value\r\n          routeSegment: true // Flag to identify this as part of a route\r\n        };\r\n      }\r\n      return null;\r\n    }).filter(item => item !== null);\r\n    \r\n    // Add all items at once to avoid React state batching issues\r\n    if (addToCart && itemsToAdd.length > 0) {\r\n      addToCart(itemsToAdd, true);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"bg-gray-800 rounded-lg p-6 border-2 border-amber-600 shadow-lg\">\r\n      <h2 className=\"text-2xl font-bold text-amber-400 mb-5 flex items-center\">\r\n        <Navigation className=\"mr-3\" size={24} />\r\n        Ederian Route Planner\r\n      </h2>\r\n      \r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-5\">\r\n        <div>\r\n          <label className=\"block text-base text-amber-300 mb-2 font-medium\">Origin:</label>\r\n          <select \r\n            className=\"w-full bg-gray-700 border-2 border-gray-600 rounded-md p-3 text-white text-base focus:border-amber-500 focus:outline-none\"\r\n            value={origin}\r\n            onChange={(e) => setOrigin(e.target.value)}\r\n          >\r\n            <option value=\"\">Select origin city</option>\r\n            {cities.map(city => (\r\n              <option key={city} value={city}>{city}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n        \r\n        <div>\r\n          <label className=\"block text-base text-amber-300 mb-2 font-medium\">Destination:</label>\r\n          <select \r\n            className=\"w-full bg-gray-700 border-2 border-gray-600 rounded-md p-3 text-white text-base focus:border-amber-500 focus:outline-none\"\r\n            value={destination}\r\n            onChange={(e) => setDestination(e.target.value)}\r\n          >\r\n            <option value=\"\">Select destination city</option>\r\n            {cities.filter(city => city !== origin).map(city => (\r\n              <option key={city} value={city}>{city}</option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"mb-5\">\r\n        <label className=\"block text-base text-amber-300 mb-2 font-medium\">Prioritize:</label>\r\n        <div className=\"flex flex-wrap gap-3\">\r\n          <button \r\n            className={`px-4 py-2 rounded-md flex items-center text-base font-medium ${prioritize === 'time' ? 'bg-amber-600 text-white border-2 border-amber-400' : 'bg-gray-700 text-white border-2 border-gray-600 hover:bg-gray-600'}`}\r\n            onClick={() => setPrioritize('time')}\r\n          >\r\n            <Clock size={18} className=\"mr-2\" />\r\n            Fastest\r\n          </button>\r\n          <button \r\n            className={`px-4 py-2 rounded-md flex items-center text-base font-medium ${prioritize === 'cost' ? 'bg-amber-600 text-white border-2 border-amber-400' : 'bg-gray-700 text-white border-2 border-gray-600 hover:bg-gray-600'}`}\r\n            onClick={() => setPrioritize('cost')}\r\n          >\r\n            <DollarSign size={18} className=\"mr-2\" />\r\n            Cheapest\r\n          </button>\r\n          <button \r\n            className={`px-4 py-2 rounded-md flex items-center text-base font-medium ${prioritize === 'comfort' ? 'bg-amber-600 text-white border-2 border-amber-400' : 'bg-gray-700 text-white border-2 border-gray-600 hover:bg-gray-600'}`}\r\n            onClick={() => setPrioritize('comfort')}\r\n          >\r\n            <Compass size={18} className=\"mr-2\" />\r\n            Most Comfortable\r\n          </button>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"mb-5\">\r\n        <label className=\"block text-base text-amber-300 mb-2 font-medium\">Transport Mode (Optional):</label>\r\n        <select \r\n          className=\"w-full bg-gray-700 border-2 border-gray-600 rounded-md p-3 text-white text-base focus:border-amber-500 focus:outline-none\"\r\n          value={transportMode}\r\n          onChange={(e) => setTransportMode(e.target.value)}\r\n        >\r\n          <option value=\"\">Any available mode</option>\r\n          {availableTransportModes.map(mode => {\r\n            // Safely access travel data with null checks\r\n            const standardModes = travelData?.travel?.standard || [];\r\n            const premiumModes = travelData?.travel?.premium || [];\r\n            const modeData = [...standardModes, ...premiumModes]\r\n              .find(item => item && item.id === mode);\r\n            \r\n            return modeData ? (\r\n              <option key={mode} value={mode}>\r\n                {modeData.name} ({modeData.speed})\r\n              </option>\r\n            ) : (\r\n              <option key={mode} value={mode}>{mode}</option>\r\n            );\r\n          })}\r\n        </select>\r\n      </div>\r\n      \r\n      <button \r\n        className=\"w-full bg-amber-600 hover:bg-amber-700 font-bold py-3 px-4 rounded-lg flex items-center justify-center text-black text-lg shadow-md transition-colors duration-200\"\r\n        onClick={calculateRoute}\r\n        disabled={!origin || !destination}\r\n      >\r\n        <Map size={20} className=\"mr-2\" />\r\n        Calculate Route\r\n      </button>\r\n      \r\n      \r\n      {route && route.valid && (\r\n        <div className=\"mt-6\">\r\n          <div className=\"bg-gray-900 rounded-lg border-2 border-amber-700 p-4 mb-2\">\r\n            <button \r\n              className=\"w-full flex items-center justify-between font-bold text-lg text-amber-400\"\r\n              onClick={() => setResultsCollapsed(!resultsCollapsed)}\r\n            >\r\n              <span className=\"flex items-center\">\r\n                <Map size={20} className=\"mr-2\" />\r\n                Route Results\r\n              </span>\r\n              <span className=\"bg-gray-800 rounded-full p-1\">\r\n                {resultsCollapsed ? \r\n                  <ChevronRight size={20} /> : \r\n                  <ChevronDown size={20} />\r\n                }\r\n              </span>\r\n            </button>\r\n          </div>\r\n          \r\n          {!resultsCollapsed && (\r\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\r\n              {/* Route Details Panel */}\r\n              <div className=\"bg-gray-900 rounded-lg border-2 border-amber-700 p-5\">\r\n                <h3 className=\"text-xl font-bold text-amber-400 mb-3\">Route Details</h3>\r\n                \r\n                <div className=\"space-y-3 mb-5\">\r\n                  <div className=\"text-lg\">\r\n                    <span className=\"text-amber-300 font-medium\">Path: </span>\r\n                    <span className=\"text-white\">{route.path.join(\" → \")}</span>\r\n                  </div>\r\n                  \r\n                  <div className=\"text-lg\">\r\n                    <span className=\"text-amber-300 font-medium\">Total Distance: </span>\r\n                    <span className=\"text-white\">{route.segments.reduce((total, segment) => total + segment.distance, 0)} miles</span>\r\n                  </div>\r\n                  \r\n                  <div className=\"text-lg\">\r\n                    <span className=\"text-amber-300 font-medium\">Total Travel Time: </span>\r\n                    <span className=\"text-white\">{formatTime(route.totalTime)}</span>\r\n                  </div>\r\n                  \r\n                  <div className=\"text-lg\">\r\n                    <span className=\"text-amber-300 font-medium\">Estimated Cost: </span>\r\n                    <span className=\"text-white\">{formatCost(route.totalCost)}</span>\r\n                  </div>\r\n                </div>\r\n                \r\n                {route.segments && route.segments.length > 0 && (\r\n                  <div>\r\n                    <h4 className=\"text-lg font-semibold text-amber-400 mb-3\">Segment Details</h4>\r\n                    <div className=\"space-y-3 max-h-64 overflow-y-auto pr-2 pb-1\">\r\n                      {route.segments.map((segment, index) => (\r\n                        <div key={index} className=\"bg-gray-800 p-3 rounded-md border border-gray-700\">\r\n                          <div className=\"text-amber-300 font-medium\">{segment.from} → {segment.to}</div>\r\n                          <div className=\"text-white\">\r\n                            <span className=\"text-gray-400\">Transport:</span> {segment.mode}\r\n                          </div>\r\n                          <div className=\"text-white\">\r\n                            <span className=\"text-gray-400\">Distance:</span> {segment.distance} miles\r\n                          </div>\r\n                        </div>\r\n                      ))}\r\n                    </div>\r\n                  </div>\r\n                )}\r\n                \r\n                {addToCart && (\r\n                  <button\r\n                    className=\"w-full mt-5 bg-amber-600 hover:bg-amber-700 font-bold py-3 rounded-lg flex items-center justify-center text-white text-base shadow-md transition-colors duration-200\"\r\n                    onClick={addRouteToCart}\r\n                  >\r\n                    <PlaneTakeoff size={18} className=\"mr-2\" />\r\n                    Add Travel Options to Cart\r\n                  </button>\r\n                )}\r\n              </div>\r\n              \r\n              {/* Route Map Panel */}\r\n              <div>\r\n                <RouteMapVisualization route={route} cityGraph={cityGraph} />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n      \r\n      {route && !route.valid && (\r\n        <div className=\"mt-6 p-5 bg-gray-900 rounded-lg border-2 border-red-700 text-red-400 text-lg font-medium\">\r\n          No valid route found between these cities with the selected transport mode.\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default RoutePlanner;","import React, { useRef, useEffect } from 'react';\r\nimport { X } from 'lucide-react';\r\n\r\nconst RequisitionOrder = ({ isOpen, onClose, cart, playerCount, totalCost, formatCost }) => {\r\n  // Prevent scroll on body when modal is open\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      document.body.style.overflow = 'hidden';\r\n    } else {\r\n      document.body.style.overflow = 'auto';\r\n    }\r\n    return () => {\r\n      document.body.style.overflow = 'auto';\r\n    };\r\n  }, [isOpen]);\r\n\r\n  // Reference for print functionality\r\n  const printRef = useRef();\r\n\r\n  // If not open, don't render anything\r\n  if (!isOpen) return null;\r\n\r\n  // Format date for the document\r\n  const today = new Date();\r\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\r\n  const formattedDate = `${months[today.getMonth()]} ${today.getDate()}, ${today.getFullYear()}`;\r\n\r\n  // Generate a random requisition number\r\n  const requisitionNumber = `KH-${Math.floor(1000 + Math.random() * 9000)}-${today.getFullYear()}`;\r\n\r\n  // Get total NPCs\r\n  const totalNPCs = cart.reduce((total, item) => {\r\n    return total + (item.npcCount ? item.npcCount * item.quantity : 0);\r\n  }, 0);\r\n\r\n  // Group items by category\r\n  const groupedItems = cart.reduce((groups, item) => {\r\n    // Determine category based on item properties\r\n    let category = 'Other';\r\n    if (item.id.includes('airship') || item.id.includes('rail') || item.id.includes('ship') || item.id.includes('caravan')) {\r\n      category = 'Transportation';\r\n    } else if (item.id.includes('guard') || item.id.includes('militia') || item.id.includes('company') || item.id.includes('wyvern') || item.id.includes('mage-warden')) {\r\n      category = 'Security';\r\n    } else if (item.id.includes('provisions') || item.id.includes('rations')) {\r\n      category = 'Provisions';\r\n    } else if (item.id.includes('inn') || item.id.includes('estate') || item.id.includes('embassy') || item.id.includes('encampment')) {\r\n      category = 'Accommodations';\r\n    } else if (item.id.includes('arcane') || item.id.includes('serum') || item.id.includes('scrying') || item.id.includes('weather')) {\r\n      category = 'Magical Services';\r\n    }\r\n    \r\n    if (!groups[category]) {\r\n      groups[category] = [];\r\n    }\r\n    groups[category].push(item);\r\n    return groups;\r\n  }, {});\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black bg-opacity-80 z-50 flex items-center justify-center p-4\">\r\n      <div \r\n        ref={printRef}\r\n        className=\"bg-white max-w-4xl w-full max-h-[90vh] overflow-y-auto rounded-lg relative\"\r\n        style={{\r\n          backgroundImage: `url('https://i.imgur.com/z1c8f4g.jpeg')`,\r\n          backgroundSize: 'cover',\r\n          backgroundPosition: 'center',\r\n          color: '#3A2921'\r\n        }}\r\n      >\r\n        {/* Close button */}\r\n        <button \r\n          onClick={onClose} \r\n          className=\"absolute top-4 right-4 p-1 rounded-full bg-gray-800 text-white hover:bg-gray-700\"\r\n        >\r\n          <X size={20} />\r\n        </button>\r\n\r\n        <div className=\"p-10 md:p-16\">\r\n          {/* Header */}\r\n          <div className=\"text-center mb-6\">\r\n            <h1 className=\"text-3xl md:text-4xl font-bold mb-2\" style={{fontFamily: 'serif'}}>Royal Requisition</h1>\r\n            <div className=\"flex justify-center space-x-3 items-center\">\r\n              <div className=\"h-0.5 bg-amber-900 w-12 opacity-70\"></div>\r\n              <div className=\"text-xl\" style={{fontFamily: 'serif'}}>The King's Hand</div>\r\n              <div className=\"h-0.5 bg-amber-900 w-12 opacity-70\"></div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Requisition Details */}\r\n          <div className=\"mb-8\">\r\n            <div className=\"flex justify-between mb-2\">\r\n              <div>\r\n                <span className=\"font-semibold\">Requisition No: </span> \r\n                <span>{requisitionNumber}</span>\r\n              </div>\r\n              <div>\r\n                <span className=\"font-semibold\">Date: </span>\r\n                <span>{formattedDate}</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex justify-between mb-2\">\r\n              <div>\r\n                <span className=\"font-semibold\">Requested By: </span>\r\n                <span>Agent of the Crown</span>\r\n              </div>\r\n              <div>\r\n                <span className=\"font-semibold\">Party Size: </span>\r\n                <span>{playerCount} PCs, {totalNPCs} NPCs</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Proclamation */}\r\n          <div className=\"mb-8 italic text-center border-t border-b border-amber-900 border-opacity-30 py-4\">\r\n            <p>\"In service of His Majesty's Crown, by authority of the King's Hand, these provisions and services are hereby requisitioned for the furtherance of royal business within the realm of Ederia and beyond. Let all loyal subjects render aid as written below, with payment to follow according to the established rates of the royal treasury.\"</p>\r\n          </div>\r\n\r\n          {/* Items Details */}\r\n          <div className=\"mb-8\">\r\n            {Object.entries(groupedItems).map(([category, items]) => (\r\n              <div key={category} className=\"mb-6\">\r\n                <h3 className=\"text-xl font-semibold mb-3 border-b border-amber-900 border-opacity-30\">{category}</h3>\r\n                <div className=\"space-y-3\">\r\n                  {items.map((item, index) => (\r\n                    <div key={index} className=\"flex flex-wrap justify-between\">\r\n                      <div className=\"mr-4 flex-grow\">\r\n                        <div className=\"font-medium\">{item.name}</div>\r\n                        <div className=\"text-sm opacity-75\">\r\n                          {item.segmentInfo && <div>{item.segmentInfo}</div>}\r\n                          {item.days > 1 && <div>Duration: {item.days} days</div>}\r\n                          {item.quantity > 1 && <div>Quantity: {item.quantity}</div>}\r\n                          {item.perPerson && <div>For: {item.people || playerCount} persons</div>}\r\n                          {item.npcCount && <div>Includes: {item.npcCount} personnel</div>}\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"text-right font-semibold\">\r\n                        {formatCost(item.cost * (item.quantity || 1))}\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          {/* Total */}\r\n          <div className=\"border-t border-double border-amber-900 pt-4 text-right\">\r\n            <div className=\"text-xl font-bold\">\r\n              Total Expenditure: {formatCost(totalCost)}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Footer */}\r\n          <div className=\"mt-8 flex justify-between items-center text-sm opacity-75\">\r\n            <div>Per Royal Edict #417</div>\r\n            <div className=\"text-center\">\r\n              <div className=\"mb-1\">* This requisition must be filed with the Royal Treasury within 30 days *</div>\r\n              <div>~ Expenses deemed excessive may be subject to review by the Crown's Council ~</div>\r\n            </div>\r\n            <div>Crown's Seal</div>\r\n          </div>\r\n\r\n          {/* Signature Block */}\r\n          <div className=\"mt-10 flex justify-between\">\r\n            <div className=\"text-center\">\r\n              <div className=\"border-t border-amber-900 border-opacity-50 mt-8 pt-1 w-40\">\r\n                Authorized Signature\r\n              </div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"border-t border-amber-900 border-opacity-50 mt-8 pt-1 w-40\">\r\n                Treasury Approval\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RequisitionOrder;","import React, { useState, useEffect } from 'react';\nimport { Scroll, ShoppingCart, Menu, X, ChevronRight, Minus, Plus, Info, Shield, Ship, Map, Home, Sparkles, Crown, Coffee } from 'lucide-react';\nimport './App.css';\nimport RoutePlanner from './RoutePlanner';\nimport RequisitionOrder from './RequisitionOrder';\n\nfunction App() {\n  // State management\n  const [activeTab, setActiveTab] = useState('travel');\n  const [activeCategory, setActiveCategory] = useState('standard');\n  const [cart, setCart] = useState([]);\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const [playerCount, setPlayerCount] = useState(5); // Default 5 player characters\n  const [standardDaysEnabled, setStandardDaysEnabled] = useState(false);\n  const [standardDays, setStandardDays] = useState(7); // Default 7 days\n  const [showRequisition, setShowRequisition] = useState(false);\n  \n  // Data structure for all travel options and services\n  const travelData = {\n    travel: {\n      standard: [\n        { id: \"caravan\", name: \"Caravan\", speed: \"24 miles/day\", cost: 1, costUnit: \"gold/person/day\", notes: \"Includes basic provisions and security\", image: \"🐪\", perPerson: true },\n        { id: \"ryanite-rail-1st\", name: \"Ryanite Rail (1st class)\", speed: \"36 miles/day\", cost: 2, costUnit: \"gold/person/day\", notes: \"Operates only between major cities and settlements\", image: \"🚆\", perPerson: true },\n        { id: \"ryanite-rail-standard\", name: \"Ryanite Rail (standard)\", speed: \"36 miles/day\", cost: 5, costUnit: \"silver/person/day\", notes: \"Operates only between major cities and settlements\", image: \"🚆\", perPerson: true },\n        { id: \"ship-private\", name: \"Ship (private cabin)\", speed: \"48 miles/day\", cost: 2, costUnit: \"gold/person/day\", notes: \"Available only along coastal routes and major rivers\", image: \"🚢\", perPerson: true },\n        { id: \"ship-shared\", name: \"Ship (shared quarters)\", speed: \"48 miles/day\", cost: 5, costUnit: \"silver/person/day\", notes: \"Available only along coastal routes and major rivers\", image: \"🚢\", perPerson: true },\n        { id: \"airship-ederia\", name: \"Airship (within Ederia)\", speed: \"96 miles/day\", cost: 3000, costUnit: \"gold/day\", notes: \"Requires minimum 3-day advance booking through House Astralor representatives\", image: \"🛸\" },\n        { id: \"airship-bordering\", name: \"Airship (bordering nations)\", speed: \"96 miles/day\", cost: 6000, costUnit: \"gold/day\", notes: \"Requires minimum 3-day advance booking through House Astralor representatives\", image: \"🛸\" },\n        { id: \"airship-distant\", name: \"Airship (distant territories)\", speed: \"96 miles/day\", cost: 9000, costUnit: \"gold/day\", notes: \"Requires minimum 3-day advance booking through House Astralor representatives\", image: \"🛸\" },\n      ],\n      premium: [\n        { id: \"expedited-rail\", name: \"Expedited Ryanite Rail\", speed: \"40 miles/day\", cost: 5, costUnit: \"gold/person/day\", notes: \"Priority boarding, private compartment, meals included, 10% speed increase\", image: \"🚅\", perPerson: true },\n        { id: \"swift-rider\", name: \"Swift Rider Service\", speed: \"60 miles/day\", cost: 10, costUnit: \"gold/day\", notes: \"Relay of horses stationed every 20 miles, limited to 2 riders per route, available only on main roads\", image: \"🐎\" },\n        { id: \"falcon-messenger\", name: \"House Falkrest Falcon Messenger\", speed: \"Varies\", cost: 20, costUnit: \"gold/message\", notes: \"Delivery of urgent sealed communications, reaches most destinations in Ederia within 1-2 days, limited to messages weighing less than 3 ounces\", image: \"🦅\" },\n      ]\n    },\n    security: {\n      watch: [\n        { id: \"small-guard\", name: \"Small Guard Detachment\", cost: 10, costUnit: \"gold/day\", notes: \"1 Sergeant, 4 Watchmen\", image: \"👮\", npcCount: 5 },\n        { id: \"medium-guard\", name: \"Medium Guard Detachment\", cost: 18, costUnit: \"gold/day\", notes: \"1 Lieutenant, 1 Sergeant, 8 Watchmen\", image: \"👮\", npcCount: 10 },\n        { id: \"large-guard\", name: \"Large Guard Detachment\", cost: 35, costUnit: \"gold/day\", notes: \"1 Captain, 2 Sergeants, 17 Watchmen\", image: \"👮\", npcCount: 20 },\n      ],\n      mercenary: [\n        { id: \"local-militia\", name: \"Local Militia\", cost: 15, costUnit: \"gold/day\", notes: \"20 fighters (varied training)\", image: \"⚔️\", npcCount: 20 },\n        { id: \"registered-company\", name: \"Registered Company\", cost: 40, costUnit: \"gold/day\", notes: \"15 professional soldiers\", image: \"⚔️\", npcCount: 15 },\n        { id: \"elite-company\", name: \"Elite Company\", cost: 100, costUnit: \"gold/day\", notes: \"10 veteran specialists\", image: \"⚔️\", npcCount: 10 },\n      ],\n      \n      potential: [\n        { id: \"silver-shields-info\", name: \"The Silver Shields\", cost: 100, costUnit: \"gold/day\", notes: \"Elite Company (10) - Specializes in personal protection and escort duties\", image: \"🛡️\", isInfo: true },\n        { id: \"thornefield-info\", name: \"Thornefield Sentinels\", cost: 40, costUnit: \"gold/day\", notes: \"Registered Company (15) - Expert in rural and wilderness operations\", image: \"🌲\", isInfo: true },\n        { id: \"shadow-riders-info\", name: \"Shadow Riders\", cost: 40, costUnit: \"gold/day\", notes: \"Registered Company (15) - Specialists in urban security and intelligence gathering\", image: \"🕵️\", isInfo: true },\n        { id: \"veltaris-info\", name: \"Veltaris Mariners\", cost: 100, costUnit: \"gold/day\", notes: \"Elite Company (10) - Naval and coastal security operations\", image: \"⚓\", isInfo: true },\n      ],\n      specialized: [\n        { id: \"wyvern-scout\", name: \"House Drakemoor Wyvern Scout\", cost: 75, costUnit: \"gold/day\", notes: \"Single Crownclaw Knight with wyvern mount, aerial reconnaissance and messaging, limited combat capability, 24-hour advance notice required\", image: \"🐉\", npcCount: 1 },\n        { id: \"mage-warden\", name: \"House Astralor Mage-Warden\", cost: 50, costUnit: \"gold/day\", notes: \"Specialized arcane security, detects magical threats and provides countermeasures, can establish temporary wards for safe lodging\", image: \"🧙\", npcCount: 1 },\n      ]\n    },\n    provisions: {\n      daily: [\n        { id: \"small-provisions\", name: \"Small Group Provisions\", cost: 5, costUnit: \"gold/day\", notes: \"For 5-10 people. Food, water, basic equipment maintenance\", image: \"🍖\" },\n        { id: \"medium-provisions\", name: \"Medium Group Provisions\", cost: 12, costUnit: \"gold/day\", notes: \"For 11-25 people. Includes pack animals and spare equipment\", image: \"🍖\" },\n        { id: \"large-provisions\", name: \"Large Group Provisions\", cost: 30, costUnit: \"gold/day\", notes: \"For 26-60 people. Includes field kitchen and medical supplies\", image: \"🍖\" },\n        { id: \"huge-provisions\", name: \"Huge Group Provisions\", cost: 60, costUnit: \"gold/day\", notes: \"For 61-100 people. Includes dedicated logistics staff\", image: \"🍖\" },\n      ],\n      specialized: [\n        { id: \"luxury-rations\", name: \"Luxury Rations\", cost: 2, costUnit: \"gold/person/day\", notes: \"Fine wines and spirits, fresh meats, variety of fruits and vegetables\", image: \"🍷\" },\n        { id: \"expedition-package\", name: \"Extended Expedition Package\", cost: 200, baseCost: true, additionalCost: 1, additionalCostUnit: \"gold/person/day\", notes: \"Weatherproof tents, portable furniture, one month of preserved rations, medicine chest with healing potions\", image: \"⛺\" },\n      ]\n    },\n    accommodations: {\n      lodging: [\n        { id: \"standard-inn\", name: \"Local Inn (standard)\", cost: 5, costUnit: \"silver/person/night\", notes: \"Private or shared room, basic meals\", image: \"🏨\", perPerson: true },\n        { id: \"premium-inn\", name: \"Local Inn (premium)\", cost: 2, costUnit: \"gold/person/night\", notes: \"Private room, quality meals, bath services\", image: \"🏨\", perPerson: true },\n        { id: \"noble-estate\", name: \"Noble Estate Hosting\", cost: 30, costUnit: \"gold/person\", notes: \"Luxury accommodations as guest of local nobility (Gift of 10-50 gold per person recommended)\", image: \"🏰\", perPerson: true, customizablePrice: true, minPrice: 10, maxPrice: 50 },\n        { id: \"embassy\", name: \"Ederian Embassy\", cost: 0, costUnit: \"No direct cost\", notes: \"Available only in major cities or foreign capitals, full diplomatic services (requires royal authorization)\", image: \"🏛️\" },\n        { id: \"encampment\", name: \"Field Encampment\", cost: 5, costUnit: \"gold/day (setup fee)\", additionalCost: \"plus provisions\", notes: \"Established by royal quartermasters, includes security perimeter\", image: \"⛺\" },\n      ],\n      administrative: [\n        { id: \"chancery\", name: \"Mobile Chancery\", cost: 25, costUnit: \"gold/day\", notes: \"Includes 2 royal scribes, official seals and documentation, secure message handling\", image: \"📜\" },\n        { id: \"herald\", name: \"Court Herald\", cost: 10, costUnit: \"gold/day\", notes: \"Makes official proclamations, arranges local meetings and audiences, manages protocol and ceremony\", image: \"📢\" },\n        { id: \"investigator\", name: \"Royal Investigator\", cost: 15, costUnit: \"gold/day\", notes: \"Specializes in evidence gathering, legal authority to question subjects, trained in detection of falsehoods\", image: \"🔍\" },\n      ]\n    },\n    magical: {\n      services: [\n        { id: \"arcane-lock\", name: \"Arcane Lock\", cost: 25, costUnit: \"gold/application\", notes: \"Secures documents or rooms against tampering\", image: \"🔒\" },\n        { id: \"truth-serum\", name: \"Truth Serum\", cost: 75, costUnit: \"gold/dose\", notes: \"Compels truthful answers for 1 hour (resisted by strong will)\", image: \"⚗️\" },\n        { id: \"scrying\", name: \"Location Scrying\", cost: 150, costUnit: \"gold/attempt\", notes: \"Attempts to locate specific person or object within 100 miles\", image: \"🔮\" },\n        { id: \"weather\", name: \"Weather Prediction\", cost: 40, costUnit: \"gold\", notes: \"Accurate 3-day forecast for region\", image: \"☁️\" },\n      ]\n    },\n    special: {\n      intelligence: [\n        { id: \"informants\", name: \"Local Informants\", cost: 30, costUnit: \"gold (average)\", notes: \"Market rumors and common knowledge, basic movements of notable figures, public sentiment reports\", image: \"👥\" },\n        { id: \"spy-network\", name: \"Royal Spy Network\", cost: 0, costUnit: \"Requires approval\", notes: \"Detailed reports on political movements, identification of potential threats, access to existing agents in the field\", image: \"🕵️\" },\n      ],\n      resources: [\n        { id: \"royal-seal\", name: \"Royal Seal Authority\", cost: 0, costUnit: \"N/A\", notes: \"Can requisition emergency resources, may command temporary service from any royal subject, grants access to secure locations\", image: \"👑\" },\n        { id: \"gift-chest\", name: \"Royal Gift Chest\", cost: 500, costUnit: \"gold (average)\", notes: \"Curated selection of diplomatic gifts, includes Ederian luxury goods, customized to recipient's known preferences\", image: \"🎁\" },\n        { id: \"banquet-fund\", name: \"Formal Banquet Fund\", cost: 300, costUnit: \"gold (average)\", notes: \"Finances to host local nobility or officials, includes entertainment and hospitality\", image: \"🍽️\" },\n        { id: \"cartographer\", name: \"Royal Cartographer\", cost: 20, costUnit: \"gold/day\", notes: \"Updates and creates detailed maps, documents new discoveries or changes\", image: \"🗺️\" },\n        { id: \"resupply\", name: \"House Thornefield Rapid Resupply\", cost: 0, costUnit: \"25% premium on provisions\", notes: \"Emergency food and supply delivery to remote locations\", image: \"📦\" },\n        { id: \"blessing\", name: \"House Emberlyn Blessing Ritual\", cost: 30, costUnit: \"gold\", notes: \"Ceremonial blessing for missions or endeavors, increases morale of local supporters\", image: \"✨\" },\n      ]\n    }\n  };\n\n  // Tab data for navigation\n  const tabs = [\n    { id: 'travel', label: 'Travel Options', icon: <Map size={20} />, categories: ['standard', 'premium'] },\n    { id: 'security', label: 'Security Services', icon: <Shield size={20} />, categories: ['watch', 'mercenary', 'specialized', 'potential'] },\n    { id: 'provisions', label: 'Provisions', icon: <Coffee size={20} />, categories: ['daily', 'specialized'] },\n    { id: 'accommodations', label: 'Accommodations', icon: <Home size={20} />, categories: ['lodging', 'administrative'] },\n    { id: 'magical', label: 'Magical Services', icon: <Sparkles size={20} />, categories: ['services'] },\n    { id: 'special', label: 'Special Resources', icon: <Crown size={20} />, categories: ['intelligence', 'resources'] },\n  ];\n\n  // Category labels\n  const categoryLabels = {\n    standard: 'Standard Travel',\n    premium: 'Premium Services',\n    watch: 'Ederian Watch',\n    mercenary: 'Mercenary Companies',\n    specialized: 'Specialized Security',\n    potential: 'Potential Companies',\n    daily: 'Daily Provisions',\n    specialized: 'Specialized Provisions',\n    lodging: 'Lodging Options',\n    administrative: 'Administrative Services',\n    services: 'Arcane Services',\n    intelligence: 'Intelligence Network',\n    resources: 'Resources & Services'\n  };\n\n  // Add item to cart\n  const addToCart = (item, isMultiple = false) => {\n    // Skip if it's just an informational item\n    if (item.isInfo) return;\n    \n    // Handle array of items\n    if (isMultiple && Array.isArray(item)) {\n      // Add all items at once\n      setCart(prevCart => {\n        const newCart = [...prevCart];\n        \n        item.forEach(singleItem => {\n          const existingItemIndex = newCart.findIndex(cartItem => cartItem.id === singleItem.id);\n          const daysValue = singleItem.preserveDays ? singleItem.days : (standardDaysEnabled ? standardDays : 1);\n          \n          let itemToAdd = { ...singleItem };\n          if (itemToAdd.customizablePrice) {\n            itemToAdd.customPriceValue = itemToAdd.cost;\n          }\n          \n          if (existingItemIndex >= 0) {\n            newCart[existingItemIndex].quantity += 1;\n          } else {\n            newCart.push({ \n              ...itemToAdd, \n              quantity: 1, \n              days: daysValue, \n              people: itemToAdd.perPerson ? 1 : 0 \n            });\n          }\n        });\n        \n        return newCart;\n      });\n      return;\n    }\n    \n    // Original code for single item\n    const existingItemIndex = cart.findIndex(cartItem => cartItem.id === item.id);\n    \n    // Set days value based on standardDaysEnabled setting or preserve item's days if flagged\n    const daysValue = item.preserveDays ? item.days : (standardDaysEnabled ? standardDays : 1);\n    \n    // For items with customizable price, use the default price initially\n    let itemToAdd = { ...item };\n    if (item.customizablePrice) {\n      itemToAdd.customPriceValue = item.cost;\n    }\n    \n    if (existingItemIndex >= 0) {\n      const updatedCart = [...cart];\n      updatedCart[existingItemIndex].quantity += 1;\n      setCart(updatedCart);\n    } else {\n      setCart([...cart, { ...itemToAdd, quantity: 1, days: daysValue, people: item.perPerson ? 1 : 0 }]);\n    }\n  };\n\n  // Remove item from cart\n  const removeFromCart = (itemId) => {\n    setCart(cart.filter(item => item.id !== itemId));\n  };\n\n  // Update item quantity in cart\n  const updateQuantity = (itemId, newQuantity) => {\n    if (newQuantity < 1) return;\n    \n    const updatedCart = cart.map(item => \n      item.id === itemId ? { ...item, quantity: newQuantity } : item\n    );\n    setCart(updatedCart);\n  };\n\n  // Update days in cart - if standardized is enabled, update ALL items\n  const updateDays = (itemId, newDays) => {\n    if (newDays < 1) return;\n    \n    if (standardDaysEnabled) {\n      // Update standardDays and all items in cart\n      setStandardDays(newDays);\n      const updatedCart = cart.map(item => ({...item, days: newDays}));\n      setCart(updatedCart);\n    } else {\n      // Just update this one item\n      const updatedCart = cart.map(item => \n        item.id === itemId ? { ...item, days: newDays } : item\n      );\n      setCart(updatedCart);\n    }\n  };\n\n  // Update people in cart\n  const updatePeople = (itemId, newPeople) => {\n    if (newPeople < 1) return;\n    \n    const updatedCart = cart.map(item => \n      item.id === itemId ? { ...item, people: newPeople } : item\n    );\n    setCart(updatedCart);\n  };\n\n  // Update custom price\n  const updateCustomPrice = (itemId, newPrice) => {\n    const updatedCart = cart.map(item => {\n      if (item.id === itemId && item.customizablePrice) {\n        // Enforce min/max bounds\n        const boundedPrice = Math.min(Math.max(newPrice, item.minPrice || 0), item.maxPrice || 1000);\n        return { ...item, customPriceValue: boundedPrice };\n      }\n      return item;\n    });\n    \n    setCart(updatedCart);\n  };\n\n  // Calculate total party size (PCs + NPCs)\n  const calculateTotalPartySize = () => {\n    // Start with player characters\n    let totalSize = playerCount;\n    \n    // Add all NPCs from security services in the cart\n    cart.forEach(item => {\n      if (item.npcCount) {\n        totalSize += item.npcCount * item.quantity;\n      }\n    });\n    \n    return totalSize;\n  };\n  \n  // Calculate total cost\n  const calculateTotal = () => {\n    const totalPartySize = calculateTotalPartySize();\n    \n    return cart.reduce((total, item) => {\n      let itemCost = 0;\n      \n      // Extract numeric value and handle silver/gold conversion\n      let baseCost = item.customizablePrice && item.customPriceValue !== undefined ? \n                    item.customPriceValue : (item.cost || 0);\n      const costUnit = item.costUnit || '';\n      \n      if (costUnit.includes('silver')) {\n        baseCost = baseCost / 20; // 20 silver = 1 gold\n      }\n      \n      // Calculate based on different cost structures\n      if (costUnit.includes('/day') && !costUnit.includes('/person')) {\n        itemCost = baseCost * item.days * item.quantity;\n      } else if (costUnit.includes('/week') && !costUnit.includes('/person')) {\n        itemCost = baseCost * Math.ceil(item.days / 7) * item.quantity;\n      } else if (costUnit.includes('/person/day')) {\n        itemCost = baseCost * totalPartySize * item.days * item.quantity;\n      } else if (costUnit.includes('/person/week')) {\n        itemCost = baseCost * totalPartySize * Math.ceil(item.days / 7) * item.quantity;\n      } else if (costUnit.includes('/person') && !costUnit.includes('/day') && !costUnit.includes('/night')) {\n        itemCost = baseCost * totalPartySize * item.quantity;\n      } else if (costUnit.includes('/night') && !costUnit.includes('/person')) {\n        itemCost = baseCost * item.days * item.quantity;\n      } else if (costUnit.includes('/person/night')) {\n        itemCost = baseCost * totalPartySize * item.days * item.quantity;\n      } else if (costUnit.includes('/message') || costUnit.includes('/dose') || costUnit.includes('/application')) {\n        itemCost = baseCost * item.quantity;\n      } else if (item.baseCost) {\n        // Handle base cost + per person/day\n        const additionalCost = item.additionalCost || 0;\n        itemCost = (baseCost + (additionalCost * totalPartySize * item.days)) * item.quantity;\n      } else {\n        // Flat rate items\n        itemCost = baseCost * item.quantity;\n      }\n      \n      return total + itemCost;\n    }, 0);\n  };\n\n  // Format cost as gold/silver string\n  const formatCost = (cost) => {\n    const gold = Math.floor(cost);\n    const silver = Math.round((cost - gold) * 20);\n    \n    if (gold > 0 && silver > 0) {\n      return `${gold} gold, ${silver} silver`;\n    } else if (gold > 0) {\n      return `${gold} gold`;\n    } else {\n      return `${silver} silver`;\n    }\n  };\n\n  // Calculate item cost for display\n  const calculateItemCost = (item) => {\n    const totalPartySize = calculateTotalPartySize();\n    \n    let itemCost = 0;\n    \n    // Extract numeric value and handle silver/gold conversion\n    let baseCost = item.customizablePrice && item.customPriceValue !== undefined ? \n                  item.customPriceValue : (item.cost || 0);\n    const costUnit = item.costUnit || '';\n    \n    if (costUnit.includes('silver')) {\n      baseCost = baseCost / 20; // 20 silver = 1 gold\n    }\n    \n    // Calculate based on different cost structures\n    if (costUnit.includes('/day') && !costUnit.includes('/person')) {\n      itemCost = baseCost * item.days * item.quantity;\n    } else if (costUnit.includes('/week') && !costUnit.includes('/person')) {\n      itemCost = baseCost * Math.ceil(item.days / 7) * item.quantity;\n    } else if (costUnit.includes('/person/day')) {\n      itemCost = baseCost * totalPartySize * item.days * item.quantity;\n    } else if (costUnit.includes('/person/week')) {\n      itemCost = baseCost * totalPartySize * Math.ceil(item.days / 7) * item.quantity;\n    } else if (costUnit.includes('/person') && !costUnit.includes('/day') && !costUnit.includes('/night')) {\n      itemCost = baseCost * totalPartySize * item.quantity;\n    } else if (costUnit.includes('/night') && !costUnit.includes('/person')) {\n      itemCost = baseCost * item.days * item.quantity;\n    } else if (costUnit.includes('/person/night')) {\n      itemCost = baseCost * totalPartySize * item.days * item.quantity;\n    } else if (costUnit.includes('/message') || costUnit.includes('/dose') || costUnit.includes('/application')) {\n      itemCost = baseCost * item.quantity;\n    } else if (item.baseCost) {\n      // Handle base cost + per person/day\n      const additionalCost = item.additionalCost || 0;\n      itemCost = (baseCost + (additionalCost * totalPartySize * item.days)) * item.quantity;\n    } else {\n      // Flat rate items\n      itemCost = baseCost * item.quantity;\n    }\n    \n    return itemCost;\n  };\n\n  // Handle tab change\n  const handleTabChange = (tabId) => {\n    setActiveTab(tabId);\n    // Set default category for the new tab\n    setActiveCategory(tabs.find(tab => tab.id === tabId).categories[0]);\n  };\n\n  // Handle category change\n  const handleCategoryChange = (categoryId) => {\n    setActiveCategory(categoryId);\n  };\n\n  return (\n    <div className=\"flex flex-col h-screen bg-gray-900 text-white font-sans\">\n      {/* Header */}\n      <header className=\"bg-gray-800 border-b border-gray-700 p-4 flex justify-between items-center\">\n        <div className=\"flex items-center space-x-2\">\n          <Scroll size={24} className=\"text-amber-500\" />\n          <h1 className=\"text-xl font-bold text-amber-500\">Ederian Travel Tracker</h1>\n        </div>\n        <div className=\"flex space-x-4 items-center\">\n          <div className=\"bg-gray-900 p-2 rounded flex items-center mr-2\">\n            <span className=\"text-sm text-gray-400 mr-2\">PCs:</span>\n            <button \n              className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n              onClick={() => setPlayerCount(Math.max(1, playerCount - 1))}\n            >\n              <Minus size={14} />\n            </button>\n            <span className=\"mx-2 w-6 text-center\">{playerCount}</span>\n            <button \n              className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n              onClick={() => setPlayerCount(playerCount + 1)}\n            >\n              <Plus size={14} />\n            </button>\n          </div>\n          \n          <div className=\"bg-gray-900 p-2 rounded flex items-center mr-2\">\n            <span className=\"text-sm text-gray-400 mr-2\">NPCs:</span>\n            <span className=\"w-6 text-center\">{calculateTotalPartySize() - playerCount}</span>\n          </div>\n          \n          <div className=\"bg-gray-900 p-2 rounded flex items-center mr-2\">\n            <div className=\"flex items-center space-x-2\">\n              <div>\n                <label className=\"text-sm text-gray-400 mr-2\">Standard Travel Days:</label>\n                <div className=\"flex items-center\">\n                  <button \n                    className={`px-3 py-1 text-xs rounded-l ${standardDaysEnabled ? 'bg-amber-600 text-white' : 'bg-gray-700 text-gray-300'}`}\n                    onClick={() => setStandardDaysEnabled(true)}\n                  >\n                    ON\n                  </button>\n                  <button \n                    className={`px-3 py-1 text-xs rounded-r ${!standardDaysEnabled ? 'bg-amber-600 text-white' : 'bg-gray-700 text-gray-300'}`}\n                    onClick={() => setStandardDaysEnabled(false)}\n                  >\n                    OFF\n                  </button>\n                </div>\n              </div>\n              {standardDaysEnabled && (\n                <div className=\"flex items-center\">\n                  <button \n                    className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n                    onClick={() => setStandardDays(Math.max(1, standardDays - 1))}\n                  >\n                    <Minus size={14} />\n                  </button>\n                  <span className=\"mx-2 w-6 text-center\">{standardDays}</span>\n                  <button \n                    className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n                    onClick={() => {\n                      const newDays = standardDays + 1;\n                      setStandardDays(newDays);\n                      // Update all items in cart\n                      const updatedCart = cart.map(item => ({...item, days: newDays}));\n                      setCart(updatedCart);\n                    }}\n                  >\n                    <Plus size={14} />\n                  </button>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          <button \n            className=\"bg-amber-600 hover:bg-amber-700 p-2 rounded flex items-center space-x-1\"\n            onClick={() => setSidebarOpen(!sidebarOpen)}\n          >\n            <ShoppingCart size={20} />\n            <span>Cart ({cart.length})</span>\n          </button>\n        </div>\n      </header>\n\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Main Content */}\n        <main className=\"flex-1 overflow-y-auto p-4\">\n          {/* Tab Navigation */}\n          <div className=\"mb-4 flex overflow-x-auto pb-2 scrollbar-thin scrollbar-thumb-gray-700\">\n            {tabs.map(tab => (\n              <button\n                key={tab.id}\n                className={`flex items-center px-4 py-2 mr-2 rounded-lg transition-colors ${\n                  activeTab === tab.id \n                    ? 'bg-gray-700 text-amber-500 border border-amber-700' \n                    : 'bg-gray-800 hover:bg-gray-700'\n                }`}\n                onClick={() => handleTabChange(tab.id)}\n              >\n                <span className=\"mr-2\">{tab.icon}</span>\n                {tab.label}\n              </button>\n            ))}\n          </div>\n          \n          {/* Category Selection */}\n          <div className=\"mb-6 flex flex-wrap gap-2\">\n            {tabs.find(tab => tab.id === activeTab).categories.map(category => (\n              <button\n                key={category}\n                className={`px-3 py-1 text-sm rounded-full transition-colors ${\n                  activeCategory === category \n                    ? 'bg-amber-600 text-white' \n                    : 'bg-gray-800 hover:bg-gray-700'\n                }`}\n                onClick={() => handleCategoryChange(category)}\n              >\n                {categoryLabels[category]}\n              </button>\n            ))}\n          </div>\n          \n          {/* Route Planner - only show in travel tab */}\n          {activeTab === 'travel' && (\n            <div className=\"mb-6\">\n              <RoutePlanner \n                travelData={travelData} \n                playerCount={playerCount} \n                addToCart={addToCart} \n              />\n            </div>\n          )}\n          \n          {/* Items Grid */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {travelData[activeTab][activeCategory].map(item => (\n              <div key={item.id}\n                className={`bg-gray-800 rounded-lg overflow-hidden border border-gray-700 hover:border-amber-600 transition-colors ${\n                  item.isInfo ? 'opacity-80' : ''\n                }`}\n              >\n                <div className=\"p-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center\">\n                      <span className=\"text-2xl mr-2\">{item.image}</span>\n                      <h3 className=\"text-lg font-semibold\">{item.name}</h3>\n                    </div>\n                    {!item.isInfo && (\n                      <button\n                        className=\"bg-amber-600 hover:bg-amber-700 p-1.5 rounded-full\"\n                        onClick={() => addToCart(item)}\n                      >\n                        <Plus size={16} />\n                      </button>\n                    )}\n                  </div>\n                  \n                  <div className=\"mt-2\">\n                    <div className=\"text-amber-500 font-medium\">\n                      {item.cost} {item.costUnit || ''}\n                      {item.baseCost && item.additionalCost && ` + ${item.additionalCost} ${item.additionalCostUnit || ''}`}\n                    </div>\n                    {item.speed && (\n                      <div className=\"text-gray-400 text-sm\">{item.speed}</div>\n                    )}\n                    {item.npcCount && (\n                      <div className=\"text-gray-300 text-sm mt-1\">NPCs: {item.npcCount}</div>\n                    )}\n                    <p className=\"text-gray-400 text-sm mt-1\">{item.notes || ''}</p>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </main>\n\n        {/* Sidebar Cart */}\n        <aside className={`w-96 bg-gray-800 border-l border-gray-700 transform transition-transform ${\n          sidebarOpen ? 'translate-x-0' : 'translate-x-full'\n        } fixed right-0 top-0 h-screen overflow-y-auto z-10 p-4`}>\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-xl font-bold text-amber-500 flex items-center\">\n              <ShoppingCart size={20} className=\"mr-2\" />\n              Your Selection\n            </h2>\n            <button \n              className=\"text-gray-400 hover:text-white\"\n              onClick={() => setSidebarOpen(false)}\n            >\n              <X size={20} />\n            </button>\n          </div>\n\n          {cart.length === 0 ? (\n            <div className=\"text-gray-400 p-4 text-center\">\n              <div className=\"text-4xl mb-2\">🛒</div>\n              <p>Your cart is empty</p>\n              <p className=\"text-sm mt-2\">Add items from the catalog to begin tracking costs</p>\n            </div>\n          ) : (\n            <>\n              <div className=\"space-y-4\">\n                {cart.map(item => (\n                  <div key={item.id} className=\"bg-gray-900 rounded-lg p-3 relative\">\n                    <button \n                      className=\"absolute top-2 right-2 text-gray-500 hover:text-red-500\"\n                      onClick={() => removeFromCart(item.id)}\n                    >\n                      <X size={16} />\n                    </button>\n                    \n                    <div className=\"flex items-start mb-2\">\n                      <span className=\"text-2xl mr-2\">{item.image}</span>\n                      <div>\n                        <h4 className=\"font-medium\">{item.name}</h4>\n                        <div className=\"text-sm text-amber-500\">\n                          {item.cost} {item.costUnit || ''}\n                          {item.baseCost && item.additionalCost && ` + ${item.additionalCost} ${item.additionalCostUnit || ''}`}\n                        </div>\n                      </div>\n                    </div>\n                    \n                    <div className=\"space-y-2 mt-3\">\n                      {item.npcCount ? (\n                        <div className=\"mb-2 bg-gray-700 p-2 rounded text-sm\">\n                          <span className=\"text-amber-400\">+{item.npcCount}</span> NPCs added to party\n                        </div>\n                      ) : null}\n                    \n                      <div className=\"flex items-center justify-between\">\n                        <label className=\"text-sm text-gray-400\">Quantity:</label>\n                        <div className=\"flex items-center\">\n                          <button \n                            className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n                            onClick={() => updateQuantity(item.id, item.quantity - 1)}\n                          >\n                            <Minus size={14} />\n                          </button>\n                          <span className=\"mx-2 w-6 text-center\">{item.quantity}</span>\n                          <button \n                            className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n                            onClick={() => updateQuantity(item.id, item.quantity + 1)}\n                          >\n                            <Plus size={14} />\n                          </button>\n                        </div>\n                      </div>\n                      \n                      {/* Only show days input for items with day-based pricing */}\n                      {(item.costUnit.includes('/day') || item.costUnit.includes('/night') || item.costUnit.includes('/week') || item.baseCost) && (\n                        <div className=\"flex items-center justify-between\">\n                          <label className=\"text-sm text-gray-400\">Days:</label>\n                          <div className=\"flex items-center\">\n                            {standardDaysEnabled ? (\n                              <div className=\"bg-amber-700 text-xs px-2 py-1 rounded text-white\">\n                                Standardized: {standardDays}\n                              </div>\n                            ) : (\n                              <>\n                                <button \n                                  className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n                                  onClick={() => updateDays(item.id, item.days - 1)}\n                                >\n                                  <Minus size={14} />\n                                </button>\n                                <span className=\"mx-2 w-6 text-center\">{item.days}</span>\n                                <button \n                                  className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n                                  onClick={() => updateDays(item.id, item.days + 1)}\n                                >\n                                  <Plus size={14} />\n                                </button>\n                              </>\n                            )}\n                          </div>\n                        </div>\n                      )}\n                      \n                      {/* Customizable price field */}\n                      {item.customizablePrice && (\n                        <div className=\"flex items-center justify-between mt-2\">\n                          <label className=\"text-sm text-gray-400\">Custom Gift (per person):</label>\n                          <div className=\"flex items-center\">\n                            <input\n                              type=\"number\"\n                              min={item.minPrice || 0}\n                              max={item.maxPrice || 100}\n                              value={item.customPriceValue}\n                              onChange={(e) => updateCustomPrice(item.id, parseInt(e.target.value) || 0)}\n                              className=\"w-16 bg-gray-700 border border-gray-600 rounded p-1 text-center text-white\"\n                            />\n                            <span className=\"ml-1 text-amber-500\">gold</span>\n                          </div>\n                        </div>\n                      )}\n                      \n                      {/* Only show people input for items with per-person pricing */}\n                      {(item.perPerson) && (\n                        <div className=\"flex items-center justify-between\">\n                          <label className=\"text-sm text-gray-400\">People:</label>\n                          <div className=\"flex items-center\">\n                            <button \n                              className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n                              onClick={() => updatePeople(item.id, item.people - 1)}\n                            >\n                              <Minus size={14} />\n                            </button>\n                            <span className=\"mx-2 w-6 text-center\">{item.people}</span>\n                            <button \n                              className=\"p-1 bg-gray-800 rounded hover:bg-gray-700\"\n                              onClick={() => updatePeople(item.id, item.people + 1)}\n                            >\n                              <Plus size={14} />\n                            </button>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                    \n                    <div className=\"mt-3 text-right font-medium\">\n                      Subtotal: {formatCost(calculateItemCost(item))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"mt-6 border-t border-gray-700 pt-4\">\n                <div className=\"flex justify-between items-center mb-3\">\n                  <span className=\"text-gray-400 text-sm\">Total Party Size:</span>\n                  <span className=\"text-white\">{calculateTotalPartySize()} ({playerCount} PCs + {calculateTotalPartySize() - playerCount} NPCs)</span>\n                </div>\n                <div className=\"flex justify-between text-lg font-bold mb-1\">\n                  <span>Total:</span>\n                  <span className=\"text-amber-500\">{formatCost(calculateTotal())}</span>\n                </div>\n                <p className=\"text-xs text-gray-400\">All requisitions by the King's Hand must be properly documented and submitted to the Royal Treasurer's office within 30 days.</p>\n              </div>\n              \n              <button \n                className=\"w-full bg-amber-600 hover:bg-amber-700 font-bold py-2 rounded-lg mt-4 flex items-center justify-center\"\n                onClick={() => setShowRequisition(true)}\n              >\n                <Scroll size={16} className=\"mr-2\" />\n                Generate Requisition Order\n              </button>\n            </>\n          )}\n        </aside>\n      </div>\n      \n      {/* Bottom Bar - Total */}\n      <footer className=\"bg-gray-800 border-t border-gray-700 p-3 sticky bottom-0\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Info size={16} className=\"text-gray-400\" />\n              <span className=\"text-sm text-gray-400\">\n                {cart.length} items selected\n              </span>\n            </div>\n            <div className=\"text-sm border-l border-gray-600 pl-4\">\n              <span className=\"text-gray-400\">Total Party Size: </span>\n              <span className=\"font-medium text-white\">{calculateTotalPartySize()}</span>\n              <span className=\"text-gray-500 text-xs ml-1\">({playerCount} PCs + {calculateTotalPartySize() - playerCount} NPCs)</span>\n            </div>\n          </div>\n          <div className=\"flex items-center\">\n            <span className=\"mr-2\">Total Cost:</span>\n            <span className=\"text-lg font-bold text-amber-500\">{formatCost(calculateTotal())}</span>\n          </div>\n          <button \n            className=\"bg-gray-700 hover:bg-gray-600 p-2 rounded flex items-center space-x-1\"\n            onClick={() => setSidebarOpen(true)}\n          >\n            <ShoppingCart size={16} />\n            <span>View Cart</span>\n            <ChevronRight size={16} />\n          </button>\n        </div>\n        </footer>\n      \n      {/* Requisition Order Modal */}\n      <RequisitionOrder \n        isOpen={showRequisition}\n        onClose={() => setShowRequisition(false)}\n        cart={cart}\n        playerCount={playerCount}\n        totalCost={calculateTotal()}\n        formatCost={formatCost}\n      />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}